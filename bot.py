import os
from datetime import *
import logging
import aiogram
import json
import datetime
import xlrd
import random
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from pathlib import Path
from dotenv import load_dotenv
import asyncio
import aioschedule
import re
from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage

storage = MemoryStorage()

env_path = Path('.') / '.env'
load_dotenv(dotenv_path=env_path)

TOKEN = os.environ['TOKEN']

# excel
# –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª
rb = xlrd.open_workbook(r'userid=name.xls')
# –≤—ã–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –ª–∏—Å—Ç
sheet = rb.sheet_by_index(0)
lines = []

async def anig_name():
    name = []

def randomnii_skaz():
    for i in range(3):
        for j in range(0, 1):
            # Print the cell values with tab space
            lines.append(sheet.cell_value(i, j))

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
chekichat = os.environ['chekichat']
dasha = os.environ['dasha']
nameandsurname = {}
sname = str()
phonenumber = []
tochka_Pushka = 0
tochka_Central = 0
rashod = os.environ['rashod']
user_id = []
user_i = '247548114'


#–ù–∞—á–∞–ª–æ –∫–ø–∏
# def KPI():
#     rb = xlrd.open_workbook(r'KPI_file.xls')
#     sheet = rb.sheet_by_index(0)
#     lines_KPI = []
#     for i in range(3):
#         for j in range(0, 1):
#             # Print the cell values with tab space
#             lines.append(sheet.cell_value(i, j))
# work with json

def open_json():
    with open('nameandsurname.json') as json_for_dict:
        global MY_CONTACT
        MY_CONTACT = json.load(json_for_dict)

def add_to_dict(userbtn, phone):
    MY_CONTACT[userbtn] = [(phone)]
    with open(r'nameandsurname.json', 'w') as json_for_dict:
        json.dump(MY_CONTACT, json_for_dict)


# bot init
bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=storage)

# log lvl
# logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


async def main():
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ stdout
    logging.basicConfig(
        level=logging.INFO,
        format="%(asctime)s - %(levelname)s - %(name)s - %(message)s",
    )
    logger.error("Starting bot")


###########################################################_–æ–±—â–∞—è —á–∞—Å—Ç—å_#########################################################


# start message
@dp.message_handler(lambda message: message.text == '/start')
async def cmd_start(callback: types.Message):
    buttons = [types.InlineKeyboardButton(text='1) –í—Ä–µ–º—è —Ä–∞–±–æ—Ç–∞—Ç—å!', callback_data='1) –í—Ä–µ–º—è —Ä–∞–±–æ—Ç–∞—Ç—å!'),
               types.InlineKeyboardButton(text='2)–î–∞–≤–∞–π –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è', callback_data='–ó–Ω–∞–∫–æ–º–≤—Å—Ç–≤–æ'),
               types.InlineKeyboardButton(text="3) –Ø –Ω–µ –∑–Ω–∞—é —á—Ç–æ –¥–µ–ª–∞—Ç—å!", callback_data="3) –Ø –Ω–µ –∑–Ω–∞—é —á—Ç–æ –¥–µ–ª–∞—Ç—å!"),
               ]
    # first_name = callback.first_name  # –ù–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º
    global name
    name = [callback.from_user.username]
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(*buttons)
    # global MY_CONTACT
    global user_id
    user_id = ['247548114', callback.from_user.id]
    # user_id1 = callback.from_user.id
    await callback.answer(
        f"–û—Ö–∞–µ, —á–∞–π–Ω—ã–π –º–∞—Å—Ç–µ—Ä {callback.from_user.first_name} \n–ï—Å–ª–∏ –º—ã —É–∂–µ –∑–Ω–∞–∫–æ–º—ã - –≤—ã–±–µ—Ä–∏ –ø–µ—Ä–≤—ã–π –ø—É–Ω–∫—Ç \n–ï—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –≤—Ç–æ—Ä–æ–π!"
        , reply_markup=keyboard)
    # await callback.answer()
    # await message.answer()


# global user_id

@dp.callback_query_handler(text='start')
async def cmd_start(callback: types.Message):
    buttons = [types.InlineKeyboardButton(text='1) –í—Ä–µ–º—è —Ä–∞–±–æ—Ç–∞—Ç—å!', callback_data='1) –í—Ä–µ–º—è —Ä–∞–±–æ—Ç–∞—Ç—å!'),
               types.InlineKeyboardButton(text="2) –Ø –Ω–µ –∑–Ω–∞—é —á—Ç–æ –¥–µ–ª–∞—Ç—å!", callback_data="3) –Ø –Ω–µ –∑–Ω–∞—é —á—Ç–æ –¥–µ–ª–∞—Ç—å!"),
               ]
    # first_name = callback.first_name  # –ù–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º
    username = callback.from_user.username
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(*buttons)
    userbtn = callback.from_user.id
    name = callback.from_user.username
    add_to_dict(userbtn, 0)
    await callback.answer(
        f"–û—Ö–∞–µ, —á–∞–π–Ω—ã–π –º–∞—Å—Ç–µ—Ä {callback.from_user.first_name} \n–ú—ã —É–∂–µ –∑–Ω–∞–∫–æ–º—ã - –≤—ã–±–µ—Ä–∏ –ø–µ—Ä–≤—ã–π –ø—É–Ω–∫—Ç \n–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, —Ç–æ –≤—Ç–æ—Ä–æ–π!",
        reply_markup=keyboard
    )
    await callback.answer()


# –ó–Ω–∞–∫–æ–º–≤—Å—Ç–≤–æ
@dp.callback_query_handler(text='–ó–Ω–∞–∫–æ–º–≤—Å—Ç–≤–æ')
async def meeting(callback: types.CallbackQuery):
    # sname = types.InlineKeyboardButton(text='–î–∞–≤–∞–π –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è', callback=)
    buttons = [types.InlineKeyboardButton(text='–ù–∞–ø–∏—Å–∞—Ç—å –µ–º—É –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º–µ', url='https://t.me/Itisialready'),
               types.InlineKeyboardButton(text='–°–ª–µ–¥–∏—Ç—å –∑–∞ –Ω–∏–º –≤ –∏–Ω—Å—Ç', url='https://www.instagram.com/chepozrat/'),
               types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='start')
               ]
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(*buttons)
    await callback.message.answer(
        '–Ø —Ç–µ–ª–µ–≥—Ä–∞–º–º –±–æ—Ç –Ω–∞–ø–∏—Å–∞–Ω–Ω—ã–π –¥–ª—è –æ–±–ª–µ–≥—á–µ–Ω–∏—è —Ç–≤–æ–µ–π —Ä–∞–±–æ—Ç—ã \n –ú–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å @Itisialready aka –í–ª–∞–¥, —Å–≤—è–∑—å —Å –Ω–∏–º:',
        reply_markup=keyboard)
    await callback.answer()


# –û—Ç–≤–µ—Ç –Ω–∞ –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
@dp.callback_query_handler(text='1) –í—Ä–µ–º—è —Ä–∞–±–æ—Ç–∞—Ç—å!')
async def time_to_work(callback: types.CallbackQuery):
    buttons = [types.InlineKeyboardButton(text='–ß–∞–π–Ω–∞—è –ò—Å—Ç–æ—Ä–∏—è –Ω–∞ –ü—É—à–∫–µ', callback_data='–ß–∞–π–Ω–∞—è –ò—Å—Ç–æ—Ä–∏—è –Ω–∞ –ü—É—à–∫–µ'),
               types.InlineKeyboardButton(text='–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –ß–∞–π–Ω–∞—è –ò—Å—Ç–æ—Ä–∏—è',
                                          callback_data='–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è —á–∞–π–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è'),
               ]
    randomnii_skaz()
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(*buttons)
    await callback.message.answer("–¶–∏—Ç–∞—Ç–∞ –¥–Ω—è:\n")
    # b = run(random.choice(lines))
    await callback.message.answer(random.choice(lines))
    # await callback.message.answer(b)
    await callback.message.answer("–ù–∞ –∫–∞–∫–æ–π —Ç–æ—á–∫–µ —Ç—ã —Å–µ–≥–æ–¥–Ω—è —Ä–∞–±–æ—Ç–∞–µ—à—å?", reply_markup=keyboard)
    await callback.answer()
    # await bot.send_message(message.from_user.id) –±–µ—Ä–µ—Ç user id –∏ –ø–∏—à–µ—Ç –ø–æ –Ω–µ–º—É
    await callback.answer()


# –û—Ç–≤–µ—Ç –Ω–∞ –≤—Ç–æ—Ä–æ–π –≤–æ–ø—Ä–æ—Å
@dp.callback_query_handler(text="3) –Ø –Ω–µ –∑–Ω–∞—é —á—Ç–æ –¥–µ–ª–∞—Ç—å!")
async def problem1(callback: types.CallbackQuery):
    buttons = [types.InlineKeyboardButton(text='–î–∞, –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å', url=dasha),
               types.InlineKeyboardButton(text="–ù–µ—Ç, –Ø –∑–∞–ø—É—Ç–∞–ª—Å—è –≤ —Ä–∞–±–æ—á–µ–º –¥–Ω–µ",
                                          callback_data="–ù–µ—Ç, –Ø –∑–∞–ø—É—Ç–∞–ª—Å—è –≤ —Ä–∞–±–æ—á–µ–º –¥–Ω–µ"),
               types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='1) –í—Ä–µ–º—è —Ä–∞–±–æ—Ç–∞—Ç—å!')
        , types.InlineKeyboardButton(text='–†–µ–≥–ª–∞–º–µ–Ω—Ç', callback_data='–†–µ–≥–ª–∞–º–µ–Ω—Ç'),
               types.InlineKeyboardButton(text='–î–æ–ª–∂–Ω–æ—Å—Ç–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è', callback_data='–î–æ–ª–∂–Ω–æ—Å—Ç–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è'),
               types.InlineKeyboardButton(text='–ú–∏—Å—Å–∏—è –∫–æ–º–ø–∞–Ω–∏–∏', callback_data='–ú–∏—Å—Å–∏—è –∫–æ–º–ø–∞–Ω–∏–∏')

               ]
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(*buttons)
    await callback.message.answer("–î–∞–≤–∞–π —Ä–∞–∑–±–µ—Ä–µ–º—Å—è!\n–£ —Ç–µ–±—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è —Å–∏—Ç—É–∞—Ü–∏—è?", reply_markup=keyboard)
    await callback.answer()
    # await message.answer(reply_markup=types.ReplyKeyboardRemove())


@dp.callback_query_handler(text='–ù–µ—Ç, –Ø –∑–∞–ø—É—Ç–∞–ª—Å—è –≤ —Ä–∞–±–æ—á–µ–º –¥–Ω–µ')
async def open_day(callback: types.CallbackQuery):
    buttons = [types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='3) –Ø –Ω–µ –∑–Ω–∞—é —á—Ç–æ –¥–µ–ª–∞—Ç—å!')
               ]
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(*buttons)
    # –†–∞—Å–ø–æ—Ä—è–¥–æ–∫
    await callback.message.answer('–°–æ–æ–±—â–µ–Ω–∏–µ 1')
    await callback.message.answer('–°–æ–æ–±—â–µ–Ω–∏–µ 2')
    await callback.message.answer('–°–æ–æ–±—â–µ–Ω–∏–µ 3')
    await callback.message.answer('–°–æ–æ–±—â–µ–Ω–∏–µ 4', reply_markup=keyboard)
    await callback.answer()


# –ü—É—à–∫–∞
@dp.callback_query_handler(text='–ß–∞–π–Ω–∞—è –ò—Å—Ç–æ—Ä–∏—è –Ω–∞ –ü—É—à–∫–µ')
async def push(callback: types.CallbackQuery):
    buttons = [
        # types.InlineKeyboardButton(text='–†–∞—Å–ø–æ—Ä—è–¥–æ–∫', callback_data='–†–∞—Å–ø–æ—Ä—è–¥–æ–∫ –Ω–∞ –ü—É—à–∫–µ'),
        types.InlineKeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É",
                                   callback_data="–û—Ç–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É –Ω–∞ –ø—É—à–∫–µ"),
        types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='1) –í—Ä–µ–º—è —Ä–∞–±–æ—Ç–∞—Ç—å!'),
        types.InlineKeyboardButton(text='–ó–∞–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É', callback_data='–ó–∞–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É')
    ]
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(*buttons)
    global tochka_Pushka
    tochka_Pushka += 1
    await callback.message.answer(f'–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è —Ç–µ–±–µ,\U0001F609 {callback.from_user.first_name} ')
    await callback.message.answer(
        '–ü–æ–º–Ω–∏,—Ç—ã —Å–∞–º—ã–π –ª—É—á—à–∏–π –º–∞—Å—Ç–µ—Ä –Ω–∞ –ø–ª–∞–Ω–µ—Ç–µ –∏ —É —Ç–µ–±—è –≤—Å–µ –ø–æ–ª—É—á–∏—Ç—Å—è!\n–ì–ª–∞–≤–Ω–æ–µ —Ö–æ—Ç–µ—Ç—å —ç—Ç–æ–≥–æ \nüëå —Ö–æ—Ä–æ—à–µ–≥–æ –Ω–∞—á–∞–ª–∞ –¥–Ω—è\nüòá —Ö–æ—Ä–æ—à–∏—Ö –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π\nüôè —Ö–æ—Ä–æ—à–µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è\nüòÖ —Ö–æ—Ä–æ—à–µ–≥–æ —á–∞—è\nü§ë —Ö–æ—Ä–æ—à–µ–π –∫–∞—Å—Å—ã')
    await callback.message.answer(
        '–ì–æ—Ç–æ–≤ –ª–∏ —Ç—ã —Å–¥–µ–ª–∞—Ç—å –ø–ª–∞–Ω —á–µ–º–ø–∏–æ–Ω–∞?\n–ó—Ä—è –∑–∞—Å–æ–º–Ω–µ–≤–∞–ª—Å—è –≤ —Ç–µ–±–µ\n–¢–≤–æ—è –Ω–∞–≥—Ä–∞–¥–∞ –∂–¥–µ—Ç —Ç–µ–±—è –≤ –Ω–∞—à–µ–º —á–∞–π–Ω–æ–º –º–∏—Ä–µ!',
        reply_markup=keyboard)
    await callback.answer()


@dp.callback_query_handler(text='–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è —á–∞–π–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è')
async def push(callback: types.CallbackQuery):
    buttons = [
        # types.InlineKeyboardButton(text='–†–∞—Å–ø–æ—Ä—è–¥–æ–∫', callback_data='–†–∞—Å–ø–æ—Ä—è–¥–æ–∫ –Ω–∞ –ü—É—à–∫–µ'),
        types.InlineKeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É",
                                   callback_data="–û—Ç–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É –Ω–∞ –ø—É—à–∫–µ"),
        types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='1) –í—Ä–µ–º—è —Ä–∞–±–æ—Ç–∞—Ç—å!'),
        types.InlineKeyboardButton(text='–ó–∞–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É', callback_data='–ó–∞–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É')
    ]
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(*buttons)
    global tochka_Central
    tochka_Central += 1
    await callback.message.answer(f'–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è —Ç–µ–±–µ,\U0001F609 {callback.from_user.first_name} ')
    await callback.message.answer(
        '–ü–æ–º–Ω–∏,—Ç—ã —Å–∞–º—ã–π –ª—É—á—à–∏–π –º–∞—Å—Ç–µ—Ä –Ω–∞ –ø–ª–∞–Ω–µ—Ç–µ –∏ —É —Ç–µ–±—è –≤—Å–µ –ø–æ–ª—É—á–∏—Ç—Å—è!\n–ì–ª–∞–≤–Ω–æ–µ —Ö–æ—Ç–µ—Ç—å —ç—Ç–æ–≥–æ \nüëå —Ö–æ—Ä–æ—à–µ–≥–æ –Ω–∞—á–∞–ª–∞ –¥–Ω—è\nüòá —Ö–æ—Ä–æ—à–∏—Ö –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π\nüôè —Ö–æ—Ä–æ—à–µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è\nüòÖ —Ö–æ—Ä–æ—à–µ–≥–æ —á–∞—è\nü§ë —Ö–æ—Ä–æ—à–µ–π –∫–∞—Å—Å—ã')
    await callback.message.answer(
        '–ì–æ—Ç–æ–≤ –ª–∏ —Ç—ã —Å–¥–µ–ª–∞—Ç—å –ø–ª–∞–Ω —á–µ–º–ø–∏–æ–Ω–∞?\n–ó—Ä—è –∑–∞—Å–æ–º–Ω–µ–≤–∞–ª—Å—è –≤ —Ç–µ–±–µ\n–¢–≤–æ—è –Ω–∞–≥—Ä–∞–¥–∞ –∂–¥–µ—Ç —Ç–µ–±—è –≤ –Ω–∞—à–µ–º —á–∞–π–Ω–æ–º –º–∏—Ä–µ!',
        reply_markup=keyboard)
    await callback.answer()


@dp.callback_query_handler(text='–†–∞—Å–ø–æ—Ä—è–¥–æ–∫ –Ω–∞ –ü—É—à–∫–µ')
async def pushday(callback: types.CallbackQuery):
    buttons = [types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='–ß–∞–π–Ω–∞—è –ò—Å—Ç–æ—Ä–∏—è –Ω–∞ –ü—É—à–∫–µ'),
               # types.InlineKeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É",
               #                            callback_data="–û—Ç–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É")
               ]
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(*buttons)
    await callback.message.answer('–¢–µ–∫—Å—Ç —Ä–∞—Å–ø–æ—Ä—è–¥–∫–∞', reply_markup=keyboard)
    await callback.answer()


@dp.callback_query_handler(text='–û—Ç–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É –Ω–∞ –ø—É—à–∫–µ')
async def pushopen(callback: types.CallbackQuery):
    buttons = [types.InlineKeyboardButton(text="–°–¥–µ–ª–∞–ª, –¥–≤–∏–≥–∞–µ–º –¥–∞–ª—å—à–µ",
                                          callback_data="–°–¥–µ–ª–∞–ª, –¥–≤–∏–≥–∞–µ–º –¥–∞–ª—å—à–µ"),
               types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='–ß–∞–π–Ω–∞—è –ò—Å—Ç–æ—Ä–∏—è –Ω–∞ –ü—É—à–∫–µ')

               ]
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(*buttons)
    await callback.message.answer(' –ù–£–ñ–ù–û —Å–¥–µ–ª–∞—Ç—å –ø–æ –ø–æ—Ä—è–¥–∫—É\n‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á')
    await callback.message.answer('1 - –≤—ã–Ω–µ—Å—Ç–∏ –≤—Å—ë –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –Ω–∞—É–ª–∏—Ü—É')
    await callback.message.answer('2 - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –º—É—Å–æ—Ä–Ω—ã–µ –ø–∞–∫–µ—Ç—ã')
    await callback.message.answer('3 - –ø–æ—Å—Ç–∞–≤–∏—Ç—å –∫–∏–ø—è—Ç–∏—Ç—å—Å—è –≤–æ–¥—É', reply_markup=keyboard)
    await callback.answer()


@dp.callback_query_handler(text='–°–¥–µ–ª–∞–ª, –¥–≤–∏–≥–∞–µ–º –¥–∞–ª—å—à–µ')
async def gonext(callback: types.CallbackQuery):
    buttons = [types.InlineKeyboardButton(text="–í—Å–µ –≥—É—É–¥",
                                          callback_data="–í—Å–µ –≥—É—É–¥"),
               types.InlineKeyboardButton(text='–ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º–∞...', url=dasha),
               types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='–ß–∞–π–Ω–∞—è –ò—Å—Ç–æ—Ä–∏—è –Ω–∞ –ü—É—à–∫–µ')
               ]
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(*buttons)
    await callback.message.answer(
        'üí∞üí∞üí∞üí∞üí∞üí∞üí∞üí∞üí∞üí∞üí∞üí∞ \n–¢–µ–ø–µ—Ä—å –ø–æ—Å—á–∏—Ç–∞–π –æ—Å—Ç–∞—Ç–æ–∫ –¥–µ–Ω–µ–≥ –≤ –∫–∞—Å—Å–µ –∏ —Å—Ä–∞–≤–Ω–∏ —Å —Ç–µ–º —á—Ç–æ –≤ —Ç–∞–±–ª–∏—Ü–µ.',
        reply_markup=keyboard)
    # await callback.message.answer('–¢–µ–∫—Å—Ç')
    # await callback.message.answer('–¢–µ–∫—Å—Ç')
    # await callback.message.answer('–¢–µ–∫—Å—Ç', reply_markup=keyboard)
    await callback.answer()


@dp.callback_query_handler(text='–í—Å–µ –≥—É—É–¥')
async def push(callback: types.CallbackQuery):
    buttons = [types.InlineKeyboardButton(text="–ì–æ—Ç–æ–≤–æ",
                                          callback_data="–ì–æ—Ç–æ–≤–æ"),
               types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='–ß–∞–π–Ω–∞—è –ò—Å—Ç–æ—Ä–∏—è –Ω–∞ –ü—É—à–∫–µ')

               ]
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(*buttons)
    await callback.message.answer('–í–æ–¥–∞ —É–∂–µ –Ω–∞–≤–µ—Ä–Ω–æ–µ –≤—Å–∫–∏–ø–µ–ª–∞,–∑–∞–ª–∏–≤–∞–π —Ç—ç—Ä–º–æ—Å–∞, –∑–∞–≤–∞—Ä–∏–≤–∞–π –≤–µ–ª–∫–æ–º–¥—Ä–∏–Ω–∫')
    await callback.message.answer('–û—Ç–∫—Ä—ã–≤–∞–π —Å–º–µ–Ω—É –≤ 1–°')
    await callback.message.answer('–ü—Ä–æ–≤–µ—Ä—å —Ç–µ–ª–µ—Ñ–æ–Ω –Ω–∞ –∑–∞—Ä—è–¥')
    await callback.message.answer('–í–∫–ª—é—á–∏ –º—É–∑—ã–∫—É –Ω–∞ —É–ª–∏—Ü–µ', reply_markup=keyboard)
    await callback.answer()


@dp.callback_query_handler(text='–ì–æ—Ç–æ–≤–æ')
async def push(callback: types.CallbackQuery):
    buttons = [
        types.InlineKeyboardButton(text="–í—Å–µ —á–∏–∫–∏ –±–∞–º–±–æ–Ω–∏",
                                   callback_data="–í—Å–µ —á–∏–∫–∏ –±–∞–º–±–æ–Ω–∏"),
        types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='–ß–∞–π–Ω–∞—è –ò—Å—Ç–æ—Ä–∏—è –Ω–∞ –ü—É—à–∫–µ')
    ]
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(*buttons)
    await callback.message.answer(
        '–û–°–¢–ê–õ–û–°–¨ –ß–£–¢–¨ –ß–£–¢–¨ –¥–æ –î–ó–ï–ù–ê\nüß∂üß∂üß∂üß∂üß∂üß∂üß∂üß∂üß∂üß∂\n–ü—Ä–æ–π–¥–∏c—å –ø–æ —Ç–æ—á–∫–∞–º —á–∏—Å—Ç–æ—Ç—ã —ç—Ç–æ–≥–æ –¥–Ω—è:')
    await callback.message.answer(
        '-–ü—Ä–æ—Ç–µ—Ä–µ—Ç—å —Å—Ç–æ–ª–µ—à–Ω–∏—Ü—É –±–∞—Ä–∞.\n-–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—ã–∫–ª–∞–¥–∫—É —Ç–æ–≤–∞—Ä–∞ –∏ —Ü–µ–Ω–Ω–∏–∫–∏.\n-–£–±–æ—Ä–∫–∞ –°–∞–Ω—É–∑–ª–∞\n-–û–ø—Ä—ã—Å–∫–∞—Ç—å —Ü–≤–µ—Ç—ã\n-–£–±–æ—Ä–∫–∞ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–∞\n-–í—ã–º—ã—Ç—å –ª–∏—Ü–æ –±–∞—Ä–Ω–æ–π —Å—Ç–æ–π–∫–∏',
        reply_markup=keyboard)
    await callback.answer()


@dp.callback_query_handler(text="–í—Å–µ —á–∏–∫–∏ –±–∞–º–±–æ–Ω–∏")
async def push(callback: types.CallbackQuery):
    buttons = [
        types.InlineKeyboardButton(text="–°—Ç–∞—Ä—Ç",
                                   callback_data="–°—Ç–∞—Ä—Ç"),
        types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='–ß–∞–π–Ω–∞—è –ò—Å—Ç–æ—Ä–∏—è –Ω–∞ –ü—É—à–∫–µ')
    ]
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(*buttons)
    await callback.message.answer(f'{callback.from_user.first_name}\nüòáüòáüòáüòáüòá')
    await callback.message.answer('–ë–õ–ê–ì–û–î–ê–†–ò–ú –ó–ê –ü–û–†–Ø–î–û–ö !\n–í–ï–î–¨ –¢–û–õ–¨–ö–û –í –ß–ò–°–¢–û–¢–ï –ò –ü–û–†–Ø–î–ö–ï –í–û–î–ò–¢–°–Ø –ò–ó–û–ë–ò–õ–ò–ï üí∞',
                                  reply_markup=keyboard)
    await callback.answer()


@dp.callback_query_handler(text="–°—Ç–∞—Ä—Ç")
async def closesmena(callback: types.CallbackQuery):
    buttons = [
        types.InlineKeyboardButton(text="–ó–∞–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É",
                                   callback_data="–ó–∞–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É"),
        types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='–ß–∞–π–Ω–∞—è –ò—Å—Ç–æ—Ä–∏—è –Ω–∞ –ü—É—à–∫–µ')
    ]
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(*buttons)
    await callback.message.answer(f'{callback.from_user.first_name}')
    # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –∫–æ—Ç–æ—Ä—É—é –±—É–¥—É—Ç –º–µ–Ω—è—Ç—å
    await callback.message.answer(
        '–¢–≤–æ–π –ö–ü–ò –Ω–∞ —ç—Ç–æ –º–µ—Å—è—Ü.\n–¢–´ –º–æ–∂–µ—à—å –±–æ–ª—å—à–µ, —á–µ–º–¥—É–º–∞–µ—à—å!\n–ú–∏—Ä —á–∞–π –º–∞–π\n–í–û–†–õ–î –ö–ê–ü 2018 –®–£ –ü–£–≠–†\n–Æ–Ω–¥—ç –¶—è–æ –ú—É\n–≥—Ä–∏–± –î–∏–Ω –°–∏–Ω\n–ì–∞–±–∞ –ì–æ–ª–¥\n–®–£ –ü–£—ç—Ä –í–æ–ª—à–µ–±—Å—Ç–≤–æ\n\–î–µ–≥—É—Å—Ç–∞—Ü–∏—è –≥–∞–±–∞ –†–£–ë–ò\n\n–î–æ–ø –∫–∞–∂–¥—ã–π +200—Ä —á–∞–π–Ω–∏–∫ –∏—Å–∏–Ω',
        reply_markup=keyboard)
    await callback.answer()


@dp.callback_query_handler(text='–ó–∞–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É')
async def push(callback: types.CallbackQuery):
    buttons = [types.InlineKeyboardButton(text="–û—Ç–ª–∏—á–Ω–æ –∑–∞–∫—Ä—ã–ª\nüí∞üí∞üòÖüí∞üí∞",
                                          callback_data="–û—Ç–ª–∏—á–Ω–æ –∑–∞–∫—Ä—ã–ª"),
               types.InlineKeyboardButton(text="–ü–ª–æ—Ö–æ –∑–∞–∫—Ä—ã–ª\nüòî",
                                          callback_data="–ü–ª–æ—Ö–æ –∑–∞–∫—Ä—ã–ª"),
               types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='–ß–∞–π–Ω–∞—è –ò—Å—Ç–æ—Ä–∏—è –Ω–∞ –ü—É—à–∫–µ')

               ]
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(*buttons)
    await callback.message.answer(f'–ö–∞–∫ –ø—Ä–æ—à–µ–ª –¥–µ–Ω—å {callback.from_user.first_name} ?', reply_markup=keyboard)
    await callback.answer()


@dp.callback_query_handler(text='–û—Ç–ª–∏—á–Ω–æ –∑–∞–∫—Ä—ã–ª')
async def push(callback: types.CallbackQuery):
    buttons = [types.InlineKeyboardButton(text="–°–≤–æ—Ä–∞—á–∏–≤–∞–µ–º—Å—è, —Ä–µ–±—è—Ç–∞", callback_data="–°–≤–æ—Ä–∞—á–∏–≤–∞–µ–º—Å—è, —Ä–µ–±—è—Ç–∞")
               # types.InlineKeyboardButton(text="üòî",
               #                            callback_data="–ü–ª–æ—Ö–æ –∑–∞–∫—Ä—ã–ª"),
               # types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='–ß–∞–π–Ω–∞—è –ò—Å—Ç–æ—Ä–∏—è –Ω–∞ –ü—É—à–∫–µ')

               ]
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(*buttons)
    # await callback.message.answer(f'–ö–∞–∫ –ø—Ä–æ—à–µ–ª –¥–µ–Ω—å {callback.from_user.first_name} ?', reply_markup=keyboard)
    await callback.message.answer('–°—É–ø–µ—Ä !üí∞ \n –î–∞–≤–∞–π —Ç–µ–ø–µ—Ä—å –≤–º–µ—Å—Ç–µ –∑–∞–∫—Ä–æ–µ–º —Å–º–µ–Ω—É.\n–ü–û–ï–•–ê–õ–ò !)', reply_markup=keyboard)
    # await callback.message.answer('–¢–µ–∫—Å—Ç –∑–∞–∫—Ä—ã—Ç–∏—è —Å–º–µ–Ω—ã3')
    # await callback.message.answer('–¢–µ–∫—Å—Ç –∑–∞–∫—Ä—ã—Ç–∏—è —Å–º–µ–Ω—ã4', reply_markup=keyboard)
    await callback.answer()


@dp.callback_query_handler(text="–°–≤–æ—Ä–∞—á–∏–≤–∞–µ–º—Å—è, —Ä–µ–±—è—Ç–∞")
async def push(callback: types.CallbackQuery):
    buttons = [types.InlineKeyboardButton(text="–ì–æ—Ç–æ–≤–æ", callback_data="–ì–æ—Ç–æ–≤–æ2")
               # types.InlineKeyboardButton(text="üòî",
               #                            callback_data="–ü–ª–æ—Ö–æ –∑–∞–∫—Ä—ã–ª"),
               # types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='–ß–∞–π–Ω–∞—è –ò—Å—Ç–æ—Ä–∏—è –Ω–∞ –ü—É—à–∫–µ')
               ]
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(*buttons)
    await callback.message.answer(f'–î–ï–õ–ê–ô –í–°–Å –ü–û –ü–û–†–Ø–î–ö–£\n‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á ')
    await callback.message.answer(
        '- –£–±—Ä–∞—Ç—å —Å–æ —Å—Ç–æ–ª–æ–≤ –≤—Å—é –ø–æ—Å—É–¥—É.\n-–í—ã–º—ã—Ç—å –ø–æ—Å—É–¥—É, –ø—Ä–æ—Ç–µ—Ä–µ—Ç—å, –ø–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ –ø–æ–ª–∫–∏.\n-–í—ã–º—ã—Ç—å —á–∞–±–∞–Ω–∏, –ø–æ–¥–¥–æ–Ω—ã –∏ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ —Å—É—à–∫—É, –ø—Ä–∏–¥–≤–∏–Ω—É—Ç—å —Å—Ç—É–ª—å—è —É —Å—Ç–æ–ª–æ–≤ –∏ —É –±–∞—Ä–∞,—Å–ª–æ–∂–∏—Ç—å –ø–ª–µ–¥—ã.'
        '\n-–ù–∞–≤–µ—Å—Ç–∏ –ø–æ—Ä—è–¥–æ–∫ –Ω–∞ –±–∞—Ä–µ –∏ –Ω–∞ —Ä–∞–±–æ—á–µ–º —Å—Ç–æ–ª–µ\n-–û–ø—É—Å—Ç–æ—à–∏—Ç—å —Ç–µ—Ä–º–æ—Å—ã –æ—Ç –ø–µ—Ä–µ–∫–∏–ø–µ–≤—à–µ–π –≤–æ–¥—ã.\n-–ó–∞–Ω–µ—Å—Ç–∏ –ª–µ—Ç–Ω—é—é –≤–µ—Ä–∞–Ω–¥—É, —Å—Ç—É–ª—å—è, –ø–æ–¥—É—à–∫–∏.\n-–í—ã–Ω–µ—Å—Ç–∏ –º—É—Å–æ—Ä.',
        reply_markup=keyboard)
    # await callback.message.answer('–¢–µ–∫—Å—Ç –∑–∞–∫—Ä—ã—Ç–∏—è —Å–º–µ–Ω—ã3')
    # await callback.message.answer('–¢–µ–∫—Å—Ç –∑–∞–∫—Ä—ã—Ç–∏—è —Å–º–µ–Ω—ã4', reply_markup=keyboard)
    await callback.answer()


@dp.callback_query_handler(text="–ì–æ—Ç–æ–≤–æ2")
async def push(callback: types.CallbackQuery):
    buttons = [types.InlineKeyboardButton(text="–°–î–ï–õ–ê–õ, –≥—É–¥ –±–∞–π", callback_data="–°–î–ï–õ–ê–õ, –≥—É–¥ –±–∞–π"),
               # types.InlineKeyboardButton(text="–ù–∞–ø–æ–º–Ω–∏, –∫–∞–∫ –∑–∞–∫—Ä—ã–∞—Ç—å —Å–º–µ–Ω—É", url=""),
               # types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='–ß–∞–π–Ω–∞—è –ò—Å—Ç–æ—Ä–∏—è –Ω–∞ –ü—É—à–∫–µ')
               ]
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(*buttons)
    await callback.message.answer(f'–¢–ï–ü–ï–†–¨ –ó–ê–ô–ú–ï–ú–°–Ø 1–° –∏ –¢–ê–ë–õ–ò–¶–ï–ô\n‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á ')
    await callback.message.answer(
        "---  –°—á–∏—Ç–∞–µ–º –Ω–∞–ª–∏—á–∫—É –≤ –∫–∞—Å—Å–µ, –∑–∞–Ω–æ—Å–∏–º –≤ —Ç–∞–±–ª—É.\n---  –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–º–µ–Ω—É –≤ 1–°,–∑–∞–Ω–æ—Å–∏–º –≤ —Ç–∞–±–ª—É.\n--- –û—Ç–ø—Ä–∞–≤–ª—è–π —Ñ–æ—Ç–æ —á–µ–∫–æ–≤ –º–Ω–µ(–±–æ—Ç—É) –∏ —è –ø–µ—Ä–µ—à–ª—é –∏—Ö –º–µ–Ω–µ–¥–∂–µ—Ä—É\n---  –í—ã–∫–ª—é—á–∞–µ–º —Å–≤–µ—Ç –≤—Ä—É–±–∏–ª—å–Ω–∏–∫–µ.\n---  –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–∞–≥–∞–∑–∏–Ω.",
        reply_markup=keyboard)
    # await callback.message.answer('–¢–µ–∫—Å—Ç –∑–∞–∫—Ä—ã—Ç–∏—è —Å–º–µ–Ω—ã3')
    # await callback.message.answer('–¢–µ–∫—Å—Ç –∑–∞–∫—Ä—ã—Ç–∏—è —Å–º–µ–Ω—ã4', reply_markup=keyboard)
    await callback.answer()


# @dp.callback_query_handler(text="–°–î–ï–õ–ê–õ, –≥—É–¥ –±–∞–π")
# async def push(callback: types.CallbackQuery):
#     buttons = [types.InlineKeyboardButton(text="–°–î–ï–õ–ê–õ, –≥—É–¥ –±–∞–π", callback_data="–°–î–ï–õ–ê–õ, –≥—É–¥ –±–∞–π"),
#                # types.InlineKeyboardButton(text="–ù–∞–ø–æ–º–Ω–∏, –∫–∞–∫ –∑–∞–∫—Ä—ã–∞—Ç—å —Å–º–µ–Ω—É", url=""),
#                # types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='–ß–∞–π–Ω–∞—è –ò—Å—Ç–æ—Ä–∏—è –Ω–∞ –ü—É—à–∫–µ')
#                ]
#     keyboard = types.InlineKeyboardMarkup(row_width=1)
#     keyboard.add(*buttons)
#     await callback.message.answer(f'–¢–ï–ü–ï–†–¨ –ó–ê–ô–ú–ï–ú–°–Ø 1–° –∏ –¢–ê–ë–õ–ò–¶–ï–ô\n‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á ')
#     await callback.message.answer("---  –°—á–∏—Ç–∞–µ–º –Ω–∞–ª–∏—á–∫—É –≤ –∫–∞—Å—Å–µ, –∑–∞–Ω–æ—Å–∏–º –≤ —Ç–∞–±–ª—É.\n---  –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–º–µ–Ω—É –≤ 1–°,–∑–∞–Ω–æ—Å–∏–º –≤ —Ç–∞–±–ª—É.\n--- –û—Ç–ø—Ä–∞–≤–ª—è–π —Ñ–æ—Ç–æ —á–µ–∫–æ–≤\n---  –í—ã–∫–ª—é—á–∞–µ–º —Å–≤–µ—Ç –≤—Ä—É–±–∏–ª—å–Ω–∏–∫–µ.\n---  –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–∞–≥–∞–∑–∏–Ω.", reply_markup=keyboard)
#     # await callback.message.answer('–¢–µ–∫—Å—Ç –∑–∞–∫—Ä—ã—Ç–∏—è —Å–º–µ–Ω—ã3')
#     # await callback.message.answer('–¢–µ–∫—Å—Ç –∑–∞–∫—Ä—ã—Ç–∏—è —Å–º–µ–Ω—ã4', reply_markup=keyboard)
#     await callback.answer()

@dp.callback_query_handler(text='–ü–ª–æ—Ö–æ –∑–∞–∫—Ä—ã–ª')
async def push(callback: types.CallbackQuery):
    buttons = [types.InlineKeyboardButton(text="–°–≤–æ—Ä–∞—á–∏–≤–∞–µ–º—Å—è, —Ä–µ–±—è—Ç–∞",
                                          callback_data="–°–≤–æ—Ä–∞—á–∏–≤–∞–µ–º—Å—è, —Ä–µ–±—è—Ç–∞"),
               # types.InlineKeyboardButton(text="üòî",
               #                            callback_data="–ü–ª–æ—Ö–æ –∑–∞–∫—Ä—ã–ª"),
               types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='–ß–∞–π–Ω–∞—è –ò—Å—Ç–æ—Ä–∏—è –Ω–∞ –ü—É—à–∫–µ')

               ]
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(*buttons)
    await callback.message.answer(f'–°–æ–π–¥–µ—Ç,–Ω–æ —É —Ç–µ–±—è –±—É–¥–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å—Ç—Ä–µ–ª—å–Ω—É—Ç—å –∑–∞–≤—Ç—Ä–∞.\n–¢–´ –õ–£–ß–®–ò–ô! üí™',
                                  reply_markup=keyboard)
    await callback.answer()


# @dp.callback_query_handler(text="–°–≤–æ—Ä–∞—á–∏–≤–∞–µ–º—Å—è, —Ä–µ–±—è—Ç–∞")
# async def push(callback: types.CallbackQuery):
#     buttons = [types.InlineKeyboardButton(text="–°–≤–æ—Ä–∞—á–∏–≤–∞–µ–º—Å—è, —Ä–µ–±—è—Ç–∞",
#                                           callback_data="–°–≤–æ—Ä–∞—á–∏–≤–∞–µ–º—Å—è, —Ä–µ–±—è—Ç–∞"),
#                # types.InlineKeyboardButton(text="üòî",
#                #                            callback_data="–ü–ª–æ—Ö–æ –∑–∞–∫—Ä—ã–ª"),
#                types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='–ß–∞–π–Ω–∞—è –ò—Å—Ç–æ—Ä–∏—è –Ω–∞ –ü—É—à–∫–µ')
#
#                ]
#     keyboard = types.InlineKeyboardMarkup(row_width=1)
#     keyboard.add(*buttons)
#     await callback.message.answer(f'–°–ª–∞–±–æ,–Ω–æ —É —Ç–µ–±—è –±—É–¥–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å—Ç—Ä–µ–ª—å–Ω—É—Ç—å –∑–∞–≤—Ç—Ä–∞.\n–¢–´ –õ–£–ß–®–ò–ô! üí™',
#                                   reply_markup=keyboard)


# # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è
# @dp.callback_query_handler(text='–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –ß–∞–π–Ω–∞—è –ò—Å—Ç–æ—Ä–∏—è')
# async def central(callback: types.CallbackQuery):
#     buttons = [types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='–ß–∞–π–Ω–∞—è –ò—Å—Ç–æ—Ä–∏—è –Ω–∞ –ü—É—à–∫–µ'),
#                types.InlineKeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É",
#                                           callback_data="–û—Ç–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É")
#                ]
#     keyboard = types.InlineKeyboardMarkup(row_width=1)
#     keyboard.add(*buttons)
#     await callback.message.answer('–¢–µ–∫—Å—Ç –æ—Ç–∫—Ä—ã—Ç–∏—è —Å–º–µ–Ω—ã1')
#     await callback.message.answer('–¢–µ–∫—Å—Ç –æ—Ç–∫—Ä—ã—Ç–∏—è —Å–º–µ–Ω—ã2')
#     await callback.message.answer('–¢–µ–∫—Å—Ç –æ—Ç–∫—Ä—ã—Ç–∏—è —Å–º–µ–Ω—ã3')
#     await callback.message.answer('–¢–µ–∫—Å—Ç –æ—Ç–∫—Ä—ã—Ç–∏—è —Å–º–µ–Ω—ã4', reply_markup=keyboard)
#     await callback.answer()


# @dp.message_handler(lambda message: message.text == ['close', 'open'])
@dp.message_handler(commands=['close'])
async def cmd_start(callback: types.Message):
    buttons = [
               types.InlineKeyboardButton(text='–ó–∞–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É –Ω–∞ –ü—É—à–∫–µ', callback_data='–°–≤–æ—Ä–∞—á–∏–≤–∞–µ–º—Å—è, —Ä–µ–±—è—Ç–∞'),
               types.InlineKeyboardButton(text='–ó–∞–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É –Ω–∞ –¶–µ–Ω—Ç—Ä–∞–ª–µ', callback_data='–°–≤–æ—Ä–∞—á–∏–≤–∞–µ–º—Å—è, —Ä–µ–±—è—Ç–∞')
               ]
    # first_name = callback.first_name  # –ù–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º
    username = callback.from_user.username
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(*buttons)
    # for key in nameandsurname.values():
    #
    await callback.answer(
        f"{callback.from_user.first_name}, —Ç–µ–±–µ —Å–µ–π—á–∞—Å –Ω–∞–¥–æ –≤—ã–±—Ä–∞—Ç—å —Ç–æ—á–∫—É, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–π —Ç—ã –∑–∞–∫—Ä—ã–≤–∞–µ—à—å —Å–º–µ–Ω—É!"
        , reply_markup=keyboard)
    await callback.answer()

@dp.message_handler(commands=['open'])
async def cmd_start(callback: types.Message):
    buttons = [types.InlineKeyboardButton(text='–û—Ç–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É', callback_data='1) –í—Ä–µ–º—è —Ä–∞–±–æ—Ç–∞—Ç—å!')
               ]
    # first_name = callback.first_name  # –ù–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º
    username = callback.from_user.username
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(*buttons)
    # for key in nameandsurname.values():
    #
    await callback.answer(
        f"{callback.from_user.first_name}, –•–æ—Ä–æ—à–µ–≥–æ –Ω–∞—á–∞–ª–∞ –¥–Ω—è!"
        , reply_markup=keyboard)
    await callback.answer()

@dp.callback_query_handler(text='–ü–ª–æ—Ö–æ –∑–∞–∫—Ä—ã–ª')
async def push(callback: types.CallbackQuery):
    buttons = [types.InlineKeyboardButton(text="–°–≤–æ—Ä–∞—á–∏–≤–∞–µ–º—Å—è, —Ä–µ–±—è—Ç–∞",
                                          callback_data="–°–≤–æ—Ä–∞—á–∏–≤–∞–µ–º—Å—è, —Ä–µ–±—è—Ç–∞"),
               # types.InlineKeyboardButton(text="üòî",
               #                            callback_data="–ü–ª–æ—Ö–æ –∑–∞–∫—Ä—ã–ª"),
               types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='–ß–∞–π–Ω–∞—è –ò—Å—Ç–æ—Ä–∏—è –Ω–∞ –ü—É—à–∫–µ')

               ]
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(*buttons)
    await callback.message.answer(f'–°–æ–π–¥–µ—Ç,–Ω–æ —É —Ç–µ–±—è –±—É–¥–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å—Ç—Ä–µ–ª—å–Ω—É—Ç—å –∑–∞–≤—Ç—Ä–∞.\n–¢–´ –õ–£–ß–®–ò–ô! üí™',
                                  reply_markup=keyboard)
    await callback.answer()


# –•–µ–ª–ø —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∏—Å–∫–ª—é—á–µ–Ω–∏–π
@dp.message_handler()
async def need_help(message: types.Message):
    a = message.chat.type
    if a != 'supergroup':
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        buttons = ['–ë–æ—Ç –ø–ª–æ—Ö–æ —Ä–∞–±–æ—Ç–∞–µ—Ç', "/start"]
        keyboard.add(*buttons)
        await message.answer(r'–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫?', reply_markup=keyboard)
        await message.answer(r"–ù–∞–∂–º–∏ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞!")


@dp.callback_query_handler(text="–†–µ–≥–ª–∞–º–µ–Ω—Ç")
async def reglament(callback: types.CallbackQuery):
    buttons = [types.InlineKeyboardButton(text='–†–µ–≥–ª–∞–º–µ–Ω—Ç',
                                          url='https://docs.google.com/document/d/1PtKJEh4C5sq3zWwRSU8VQrMh1EkT7jXlqPuY2gW3vcA/edit'),
               types.InlineKeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É",
                                          callback_data="–û—Ç–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É")
               ]
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(*buttons)
    await callback.message.answer('–†–µ–≥–ª–∞–º–µ–Ω—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –æ–¥–Ω–æ–∏–º–µ–Ω–Ω–æ–π –∫–Ω–æ–ø–æ—á–∫–µ', reply_markup=keyboard)
    await callback.answer()


@dp.callback_query_handler(text="–î–æ–ª–∂–Ω–æ—Å—Ç–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")
async def dolginstr(callback: types.CallbackQuery):
    buttons = [types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='1) –í—Ä–µ–º—è —Ä–∞–±–æ—Ç–∞—Ç—å!'),
               types.InlineKeyboardButton(text="–î–æ–ª–∂–Ω–æ—Å—Ç–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è",
                                          url="https://docs.google.com/document/d/1QZ_50FBmrg89zRkTPr0VX2KwdjykzKQxeMnfsOs43Zk/edit")
               ]
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(*buttons)
    await callback.message.answer('–î–æ–ª–∂–Ω–æ—Å—Ç–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ –æ–¥–Ω–æ–∏–º–µ–Ω–Ω–æ–π –∫–Ω–æ–ø–æ—á–∫–µ', reply_markup=keyboard)
    await callback.answer()


@dp.callback_query_handler(text="–ú–∏—Å—Å–∏—è –∫–æ–º–ø–∞–Ω–∏–∏")
async def mission(callback: types.CallbackQuery):
    buttons = [types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='1) –í—Ä–µ–º—è —Ä–∞–±–æ—Ç–∞—Ç—å!'),
               types.InlineKeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É",
                                          callback_data="–û—Ç–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É")
               ]
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(*buttons)
    await callback.message.answer(
        '–ù–∞—à–∞ –º–∏—Å—Å–∏—è - –ø–æ–¥–æ–±—Ä–∞—Ç—å —á–∞–π —Å –∑–∞–±–æ—Ç–æ–π  –¥–ª—è –í–∞—Å, –≤–∞—à–µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –∏ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏—è, —Ç–µ–º —Å–∞–º—ã–º —Å–¥–µ–ª–∞–≤ –≤–∞—Å –°—á–∞—Å—Ç–ª–∏–≤–µ–π!',
        reply_markup=keyboard)
    await callback.answer()


# @dp.message_handler(message='close')

# –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è —Ç–µ–∫—É—á–∏—Ö
@dp.message_handler()
async def choose_your_dinner():
    buttons = [types.InlineKeyboardButton(text='–°–ø–∏—Å–æ–∫ —Ä–∞—Å—Ö–æ–¥–Ω–∏–∫–æ–≤', callback_data='–†–ê–°–•–û–î'),
               # types.InlineKeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É",
               #                            callback_data="–û—Ç–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É")
               ]
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(*buttons)
    for user in name:
        await bot.send_message(chat_id=user, text="–•–µ–πüññ –Ω–µ –∑–∞–±—É–¥—å –∑–∞–∫–∞–∑–∞—Ç—å —Ä–∞—Å—Ö–æ–¥–Ω–∏–∫–∏ ", reply_markup=keyboard)
        await bot.send_message(chat_id=user, text=rashod)


async def scheduler():
    aioschedule.every().wednesday("13:00").do(choose_your_dinner)
    aioschedule.every().day("00:00").do(anig_name())
    # aioschedule.every().day("00:00").do(b)
    # aioschedule.every().day("00:00").do(c)
    while True:
        await aioschedule.run_pending()
        await asyncio.sleep(1)


async def on_startup(dp):
    asyncio.create_task(scheduler())


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏—Å—ã–ª–∞–µ–º–æ–≥–æ —Ñ–æ—Ç–æ
class WaitPhoto(StatesGroup):
    waiting_photo = State()
    # waiting_photo_commit = State()

#–û–±—Ä–æ–∞–±–æ—Ç–∫–∞ –ø—Ä–∏—Å—ã–ª–∞–µ–º–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
@dp.message_handler(content_types=["photo"])
async def photo_message(message: types.Message, state: FSMContext):
    global file_id
    file_id = [message.photo[-1].file_id]  # file ID –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
    await state.update_data(file_id=file_id)
    # print(type(file_id))
    # file_id1 = pic.photo
    button_phone = types.KeyboardButton(text="–î–µ–ª–∏—Å—å!", request_contact=True)
    keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    keyboard.add(button_phone)
    await message.answer(text="–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å –∫—Ç–æ –ø—Ä–∏—Å–ª–∞–ª —á–µ–∫, –º–Ω–µ –Ω—É–∂–µ–Ω —Ç–≤–æ–π –Ω–æ–º–µ—Ä", reply_markup=keyboard)
    # await WaitPhoto.waiting_photo.set()


@dp.message_handler(content_types=["contact"])
async def contact_photo(pic2: types.Message, state: FSMContext):
    # file_id.download('data/send-' + pic2.photo[-1].file_unique_id + '.jpg')
    data = pic2.contact
    phone = str(data)
    phone = re.findall('"phone_number": "[0-9]+"', phone)
    phone = str(phone).replace('"phone_number": "', '+')
    phone = phone.replace('"', '')
    global phone1
    phone1 = phone
    await state.update_data(phone=phone)
    userbtn = str(data)
    userbtn = re.findall('"user_id": [0-9]+', userbtn)
    userbtn = str(userbtn).replace('"user_id": ', '')
    add_to_dict(userbtn, phone)
    message = [types.InlineKeyboardButton(text="–ß–∞–π–Ω–∞—è –ò—Å—Ç–æ—Ä–∏—è –Ω–∞ –ü—É—à–∫–µ", callback_data='–ß–∞–π–Ω–∞—è –ò—Å—Ç–æ—Ä–∏—è –Ω–∞ –ü—É—à–∫–µ —Ñ–æ—Ç–æ'),
               types.InlineKeyboardButton(text='–ß–∞–π–Ω–∞—è –ò—Å—Ç–æ—Ä–∏—è –Ω–∞ –¢–µ–∞—Ç—Ä–∞–ª–∫–µ',
                                          callback_data='–ß–∞–π–Ω–∞—è –ò—Å—Ç–æ—Ä–∏—è –Ω–∞ –¢–µ–∞—Ç—Ä–∞–ª–∫–µ —Ñ–æ—Ç–æ')]
    keyboard = types.InlineKeyboardMarkup(row_width=1, resize_keyboard=True)
    keyboard.add(*message)
    # await WaitPhoto.next()
    await bot.send_message(pic2.chat.id, "–í—ã–±–µ—Ä–∏ —Å–≤–æ—é —Ç–æ—á–∫—É", reply_markup=keyboard)
    # await pic2.answer("", reply_markup=None)
#
#
@dp.callback_query_handler(text='–ß–∞–π–Ω–∞—è –ò—Å—Ç–æ—Ä–∏—è –Ω–∞ –ü—É—à–∫–µ —Ñ–æ—Ç–æ')
async def send_long_message_from(message: types.Message, state: FSMContext):
    a = datetime.date.today()
    # print(file_id, 'pop1')
    # print(file_id[0])
    await file_id[0].download(f'cheki/send-{file_id[0].file_unique_id}.jpg')  # –°–æ—Ö—Ä–∞–Ω–∏–µ–Ω–∏–µ —á–µ–∫–æ–≤
    inf = '–ß–∞–π–Ω–∞—è –ò—Å—Ç–æ—Ä–∏—è –Ω–∞ –ü—É—à–∫–µ'
    await bot.send_photo(chat_id=chekichat, photo=file_id[0])
    file_id.clear()
    await bot.send_message(chat_id=chekichat, text=f"–•–µ–πüññ,—Å–µ–≥–æ–¥–Ω—è {a}, –æ—Ç–ø—Ä–∞–≤–∏–ª –µ–≥–æ {phone1} –∏ —ç—Ç–æ {inf}")


@dp.callback_query_handler(text='–ß–∞–π–Ω–∞—è –ò—Å—Ç–æ—Ä–∏—è –Ω–∞ –¢–µ–∞—Ç—Ä–∞–ª–∫–µ —Ñ–æ—Ç–æ')
async def send_long_message_from(message: types.Message, state: FSMContext):
    a = datetime.date.today()
    # print(file_id, 'pop2')
    # print(file_id[0])
    await file_id[0].download(f'cheki/send-{file_id[0].file_unique_id}.jpg')  # –°–æ—Ö—Ä–∞–Ω–∏–µ–Ω–∏–µ —á–µ–∫–æ–≤
    inf = '–ß–∞–π–Ω–∞—è –ò—Å—Ç–æ—Ä–∏—è –Ω–∞ –¢–µ–∞—Ç—Ä–∞–ª–∫–µ'
    await bot.send_photo(chat_id=chekichat, photo=file_id[0])
    file_id.clear()
    await bot.send_message(chat_id=chekichat, text=f"–•–µ–πüññ,—Å–µ–≥–æ–¥–Ω—è {a}, –æ—Ç–ø—Ä–∞–≤–∏–ª –µ–≥–æ {phone1} –∏ —ç—Ç–æ {inf}")


# def register_handlers_food(dp: Dispatcher):
#     dp.register_message_handler(photo_message, content_types=["photo"], state='*')
#     dp.register_message_handler(contact_photo, content_types=["contact"],  state=WaitPhoto.waiting_photo)
#     dp.register_message_handler(send_long_message_from, state=WaitPhoto.waiting_photo_commit)
#




if __name__ == '__main__':
    # executor.start(dp, on_startup())
    open_json()
    # che()
    executor.start_polling(dp, skip_updates=True)





##################################################################_–∞–¥–º–∏–Ω—Å–∫–∞—è —á–∞—Å—Ç—å_##############################################

