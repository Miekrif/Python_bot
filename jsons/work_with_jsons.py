import os
import json

JSON_FILE_ADMIN = 'jsons/message.json'


async def word_mentor():
    slovo = "–ó–¥–µ—Å—å –±—ã–ª–∏ –ø—Ä–æ–¥–∞–≤–∞–Ω—Å–∫–∏–µ –º—É–¥—Ä–æ—Å—Ç–∏"
    print(slovo)
    return slovo


def open_json_admins():
    if os.path.exists(JSON_FILE_ADMIN):
        with open(JSON_FILE_ADMIN , 'r' , encoding='utf-8') as file:
            messages_admin = json.load(file)
    else:
        messages_admin = {}
    return messages_admin


def read_json_admin_file_add_user(user_id):
    if os.path.exists(JSON_FILE_ADMIN):
        with open(JSON_FILE_ADMIN , 'r' , encoding='utf-8') as file:
            messages_admin = json.load(file)

        messages_admin["users"]["granted_users"].append(int(user_id))

        with open(JSON_FILE_ADMIN , 'w' , encoding='utf-8') as json_file:
            json.dump(messages_admin , json_file , ensure_ascii=False , indent=4)
    else:
        print('–§–∞–π–ª–∞ –Ω–µ—Ç')
    messages = open_json_admins()


def read_json_admin_file_add_user_admin(user_id):
    if os.path.exists(JSON_FILE_ADMIN):
        with open(JSON_FILE_ADMIN , 'r' , encoding='utf-8') as file:
            messages_admin = json.load(file)

        messages_admin["users"]["admins"].append(int(user_id))

        with open(JSON_FILE_ADMIN , 'w' , encoding='utf-8') as json_file:
            json.dump(messages_admin , json_file , ensure_ascii=False , indent=4)
    else:
        print('–§–∞–π–ª–∞ –Ω–µ—Ç')
    messages = open_json_admins()


def save_json_admins(role , data):  # roles_dict
    if os.path.exists(JSON_FILE_ADMIN):
        with open(JSON_FILE_ADMIN , 'r' , encoding='utf-8') as file:
            messages_admin = json.load(file)

        messages_admin.get('roles_dict' , {})[role] = data

        with open(JSON_FILE_ADMIN , 'w' , encoding='utf-8') as json_file:
            json.dump(messages_admin , json_file , ensure_ascii=False , indent=4)

        messages = open_json_admins()
    else:
        print('–§–∞–π–ª–∞ –Ω–µ—Ç')


def del_json_user(user):
    if os.path.exists(JSON_FILE_ADMIN):
        with open(JSON_FILE_ADMIN , 'r' , encoding='utf-8') as file:
            messages_admin = json.load(file)
        try:

            del messages_admin["users"].get('granted_users_is' , {})[str(user)]

        except Exception as e:
            print(e)
            pass

        try:

            messages_admin["users"].get('granted_users' , []).remove(int(user))

        except Exception as e:
            print(e)
            pass

        with open(JSON_FILE_ADMIN , 'w' , encoding='utf-8') as json_file:
            json.dump(messages_admin , json_file , ensure_ascii=False , indent=4)

        messages = open_json_admins()

    else:
        print('–§–∞–π–ª–∞ –Ω–µ—Ç')


def del_json_admin(user):
    if os.path.exists(JSON_FILE_ADMIN):
        with open(JSON_FILE_ADMIN , 'r' , encoding='utf-8') as file:
            messages_admin = json.load(file)

        try:
            messages_admin["users"]['admins'].remove(int(user))
        except Exception as e:
            print(e)
            pass

        with open(JSON_FILE_ADMIN , 'w' , encoding='utf-8') as json_file:
            json.dump(messages_admin , json_file , ensure_ascii=False , indent=4)

        messages = open_json_admins()

    else:
        print('–§–∞–π–ª–∞ –Ω–µ—Ç')


def add_granted_users_is_data(userid , name , surname , phone):
    if os.path.exists(JSON_FILE_ADMIN):
        with open(JSON_FILE_ADMIN , 'r' , encoding='utf-8') as file:
            messages_admin = json.load(file)

        try:
            messages_admin["users"].get('granted_users_is' , {})[str(userid)] = {
                "Name": str(name) ,
                "Surname": str(surname) ,
                "phone_number": str(phone)
            }
            print(messages_admin.get('granted_users_is' , {})[str(userid)])
        except Exception as e:
            print(e)
            pass

        with open(JSON_FILE_ADMIN , 'w' , encoding='utf-8') as json_file:
            json.dump(messages_admin , json_file , ensure_ascii=False , indent=4)

        messages = open_json_admins()


def add_sell_point(point, point_id):
    if os.path.exists(JSON_FILE_ADMIN):
        with open(JSON_FILE_ADMIN , 'r' , encoding='utf-8') as file:
            messages_admin = json.load(file)

        try:
            messages_admin.get('trade_points' , {})[point] = str(point_id)
            messages_admin.get('scheduled_message' , {})[point] = '''
                –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ‚òÄÔ∏è –ó–∞–¥–∞—á–∏ —Å–µ–≥–æ–¥–Ω—è –Ω–∞ —Å–º–µ–Ω—ÉüÜï
                –£—Ç—Ä–æ:
                1. –ü—Ä–∏—Å–ª–∞—Ç—å —Ñ–æ—Ç–æ–æ—Ç—á–µ—Ç –æ—Ç–∫—Ä—ã—Ç–∏—è üëå
                2. –ó–∞–ø–∏—Å–∞—Ç—å –≥–æ—Å—Ç–µ–π –Ω–∞ —á–∞–π–Ω—É—é —à–∫–æ–ª—É / –¥–µ–≥—É—Å—Ç–∞—Ü–∏—é –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è - 1
                3. –û—Ç–∑—ã–≤—ã –Ω–∞ —è–Ω–¥–µ–∫—Å - 2', '4. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–æ–ø-–ª–∏—Å—Ç –≤ —è–Ω–¥–µ–∫—Å –¥–æ 10:30
                5. –°–ª–µ–¥–∏–º –∑–∞ —Å—Ä–µ–¥–Ω–∏–º —á–µ–∫–æ–º',
                6.  –û—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –∏ –ø—Ä–∏—Å–ª–∞—Ç—å –æ—Ç—á—ë—Ç –ø–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é —Å–º–µ–Ω—ã –¥–æ 16:30
                7. –í—ã—Ä—É—á–∫–∞ - 15000
                –í–µ—á–µ—Ä:
                1. –ó–∞–ø–∏—Å–∞—Ç—å –≥–æ—Å—Ç–µ–π –Ω–∞ —á–∞–π–Ω—É—é —à–∫–æ–ª—É / –¥–µ–≥—É—Å—Ç–∞—Ü–∏—é –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è - 2
                2. –û—Ç–∑—ã–≤—ã –Ω–∞ —è–Ω–¥–µ–∫—Å - 4
                3. –ü–æ–∑–¥—Ä–∞–≤–∏—Ç—å –≥–æ—Å—Ç–µ–π —Å –î–† –¥–æ 15:00
                4. –û—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–∏—Å–ª–∞—Ç—å –æ—Ç—á—ë—Ç –ø–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é —Å–º–µ–Ω—ã –¥–æ 01:30
                5. –í—ã—Ä—É—á–∫–∞ -50000'''

        except Exception as e:
            print(e)
            pass

        with open(JSON_FILE_ADMIN , 'w' , encoding='utf-8') as json_file:
            json.dump(messages_admin , json_file , ensure_ascii=False , indent=4)

        messages = open_json_admins()


def dell_trade_point(point):
    if os.path.exists(JSON_FILE_ADMIN):
        with open(JSON_FILE_ADMIN , 'r' , encoding='utf-8') as file:
            messages_admin = json.load(file)

        try:

            del messages_admin.get('trade_points', {})[point]
            del messages_admin.get('scheduled_message' , {})[point]
        except Exception as e:
            print(e)
            pass

        with open(JSON_FILE_ADMIN , 'w' , encoding='utf-8') as json_file:
            json.dump(messages_admin , json_file , ensure_ascii=False , indent=4)

        messages = open_json_admins()


def change_message_trade_points(point, message):
    if os.path.exists(JSON_FILE_ADMIN):
        with open(JSON_FILE_ADMIN , 'r' , encoding='utf-8') as file:
            messages_admin = json.load(file)

        try:
            messages_admin.get('scheduled_message' , {})[point] = message

        except Exception as e:
            print(e)
            pass

        with open(JSON_FILE_ADMIN , 'w' , encoding='utf-8') as json_file:
            json.dump(messages_admin , json_file , ensure_ascii=False , indent=4)

        messages = open_json_admins()