from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from config.config import BOT_TOKEN, CHEKICHAT, ADMINS, JSON_FILE, manager
from jsons.work_with_jsons import word_mentor
from loader import dp, bot
from utils.functions import open_json, add_to_dict, open_json
from jsons.work_with_jsons import open_json_admins


@dp.callback_query_handler(text='start')
async def cmd_start(call: types.CallbackQuery):
    id_user = call.from_user.id
    messages = open_json_admins()
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–º
    if id_user in messages.get('granted_users', []):
        if id_user in messages.get('admins', []):
            buttons = [
                types.InlineKeyboardButton(text='1) –í—Ä–µ–º—è —Ä–∞–±–æ—Ç–∞—Ç—å !' , callback_data='Time_to_work'),
                types.InlineKeyboardButton(text="2) –Ø –Ω–µ –∑–Ω–∞—é —á—Ç–æ –¥–µ–ª–∞—Ç—å !" , callback_data="I_dont_know_what_to_do"),
                types.InlineKeyboardButton(text='–ê–¥–º–∏–Ω—Å–∫–∞—è –ø–∞–Ω–µ–ª—å', callback_data='admin')
            ]
            keyboard = types.InlineKeyboardMarkup(row_width=2)
            keyboard.add(*buttons)
            await call.message.edit_text(f"–ê–¥–º–∏–Ω—Å–∫–∞—è –ø–∞–Ω–µ–ª—å", reply_markup=keyboard)
        else:
            buttons = [
                types.InlineKeyboardButton(text='1) –í—Ä–µ–º—è —Ä–∞–±–æ—Ç–∞—Ç—å !', callback_data='Time_to_work'),
                types.InlineKeyboardButton(text="2) –Ø –Ω–µ –∑–Ω–∞—é —á—Ç–æ –¥–µ–ª–∞—Ç—å !", callback_data="I_dont_know_what_to_do"),
            ]
            keyboard = types.InlineKeyboardMarkup(row_width=2)
            keyboard.add(*buttons)
        await call.message.edit_text(f"–û—Ö–∞–µ, —á–∞–π–Ω—ã–π –º–∞—Å—Ç–µ—Ä {call.from_user.first_name} \n–ú—ã —É–∂–µ –∑–Ω–∞–∫–æ–º—ã - –≤—ã–±–µ—Ä–∏ –ø–µ—Ä–≤—ã–π –ø—É–Ω–∫—Ç \n–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, —Ç–æ –≤—Ç–æ—Ä–æ–π!", reply_markup=keyboard)
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
    else:
        buttons = [
            types.InlineKeyboardButton(text='–î–∞, –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å', url=manager),
        ]
        keyboard = types.InlineKeyboardMarkup(row_width=1)
        keyboard.add(*buttons)
        await call.message.edit_text(
            f"""–ü—Ä–∏–≤–µ—Ç, –ù–µ–∑–Ω–∞–∫–æ–º–µ—Ü! –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –º–Ω–æ–π —Å–≤—è–∂–∏—Å—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º\n
             –¢–≤–æ–π id –ø–µ—Ä–µ–¥–∞–π –µ–≥–æ –º–µ–Ω–¥–∂–µ—Ä—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ–±—è –≤ —Å–ø–∏—Å–æ–∫ {id_user}""", reply_markup=keyboard)


# –ó–Ω–∞–∫–æ–º–≤—Å—Ç–≤–æ
@dp.callback_query_handler(text='intro')
async def meeting(call: types.CallbackQuery):
    buttons = [types.InlineKeyboardButton(text='–ù–∞–ø–∏—Å–∞—Ç—å –µ–º—É –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º–µ', url='https://t.me/Itisialready'),
               types.InlineKeyboardButton(text='–°–ª–µ–¥–∏—Ç—å –∑–∞ –Ω–∏–º –≤ –∏–Ω—Å—Ç', url='https://www.instagram.com/chepozrat/'),
               types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='start')
               ]
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(*buttons)
    await call.message.edit_text(
        '–Ø —Ç–µ–ª–µ–≥—Ä–∞–º–º –±–æ—Ç –Ω–∞–ø–∏—Å–∞–Ω–Ω—ã–π –¥–ª—è –æ–±–ª–µ–≥—á–µ–Ω–∏—è —Ç–≤–æ–µ–π —Ä–∞–±–æ—Ç—ã \n –ú–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å @Itisialready aka –í–ª–∞–¥, —Å–≤—è–∑—å —Å –Ω–∏–º:',
        reply_markup=keyboard)
    await call.answer()


# –û—Ç–≤–µ—Ç –Ω–∞ –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
@dp.callback_query_handler(text='Time_to_work')
async def time_to_work(call: types.CallbackQuery):
    buttons = [types.InlineKeyboardButton(text='–ß–∞–π–Ω–∞—è –ò—Å—Ç–æ—Ä–∏—è –Ω–∞ –ü—É—à–∫–µ', callback_data='–ß–∞–π–Ω–∞—è –ò—Å—Ç–æ—Ä–∏—è –Ω–∞ –ü—É—à–∫–µ'),
               types.InlineKeyboardButton(text='–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –ß–∞–π–Ω–∞—è –ò—Å—Ç–æ—Ä–∏—è',
                                          callback_data='–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è —á–∞–π–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è'),
               types.InlineKeyboardButton(text='–ß–∞–π–Ω–∞—è –ò—Å—Ç–æ—Ä–∏—è –≤ –ø–∞—Ä–∫–µ –†–µ–≤–æ–ª—é—Ü–∏–∏',
                                          callback_data='–ß–∞–π–Ω–∞—è –ò—Å—Ç–æ—Ä–∏—è –Ω–∞ –ü—É—à–∫–µ'),
               types.InlineKeyboardButton(text='–ß–∞–π–Ω–∞—è –ò—Å—Ç–æ—Ä–∏—è –≤ –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä–µ –Ω–∞ –ö—Ä–∞—Å–Ω–æ–π',
                                          callback_data='–ß–∞–π–Ω–∞—è –ò—Å—Ç–æ—Ä–∏—è –≤ –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä–µ'),
               types.InlineKeyboardButton(text='–ß–∞–π–Ω–∞—è –ò—Å—Ç–æ—Ä–∏—è –≤ –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä–µ –Ω–∞ –¢–µ–∞—Ç—Ä–∞–ª—å–Ω–æ–π',
                                          callback_data='–ß–∞–π–Ω–∞—è –ò—Å—Ç–æ—Ä–∏—è –≤ –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä–µ')
               ]
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(*buttons)
    await call.message.edit_text("–¶–∏—Ç–∞—Ç–∞ –¥–Ω—è:\n")
    await call.message.edit_text("–ù–∞ –∫–∞–∫–æ–π —Ç–æ—á–∫–µ —Ç—ã —Å–µ–≥–æ–¥–Ω—è —Ä–∞–±–æ—Ç–∞–µ—à—å?", reply_markup=keyboard)
    await call.answer()

    # await bot.send_message(message.from_user.id) –±–µ—Ä–µ—Ç user id –∏ –ø–∏—à–µ—Ç –ø–æ –Ω–µ–º—É


# –û—Ç–≤–µ—Ç –Ω–∞ –≤—Ç–æ—Ä–æ–π –≤–æ–ø—Ä–æ—Å
@dp.callback_query_handler(text="I_dont_know_what_to_do")
async def problem1(call: types.CallbackQuery):
    buttons = [types.InlineKeyboardButton(text='–î–∞, –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å', url=manager),
               types.InlineKeyboardButton(text="–ù–µ—Ç, –Ø –∑–∞–ø—É—Ç–∞–ª—Å—è –≤ —Ä–∞–±–æ—á–µ–º  –¥–Ω–µ(",
                                          callback_data="Im_confused")
        , types.InlineKeyboardButton(text='–†–µ–≥–ª–∞–º–µ–Ω—Ç', callback_data='–†–µ–≥–ª–∞–º–µ–Ω—Ç'),
               types.InlineKeyboardButton(text='–î–æ–ª–∂–Ω–æ—Å—Ç–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è', callback_data='–î–æ–ª–∂–Ω–æ—Å—Ç–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è'),
               types.InlineKeyboardButton(text='–ú–∏—Å—Å–∏—è –∫–æ–º–ø–∞–Ω–∏–∏', callback_data='–ú–∏—Å—Å–∏—è –∫–æ–º–ø–∞–Ω–∏–∏'),
               types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='Time_to_work')

               ]
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(*buttons)
    await call.message.edit_text("–î–∞–≤–∞–π —Ä–∞–∑–±–µ—Ä–µ–º—Å—è!\n–£ —Ç–µ–±—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è —Å–∏—Ç—É–∞—Ü–∏—è?", reply_markup=keyboard)
    await call.answer()
    # await message.answer(reply_markup=types.ReplyKeyboardRemove())


@dp.callback_query_handler(text='Im_confused')
async def open_day(call: types.CallbackQuery):
    buttons = [types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='I_dont_know_what_to_do')
               ]
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(*buttons)
    # –†–∞—Å–ø–æ—Ä—è–¥–æ–∫
    await call.message.edit_text('–°–æ–æ–±—â–µ–Ω–∏–µ 1')
    await call.message.edit_text('–°–æ–æ–±—â–µ–Ω–∏–µ 2')
    await call.message.edit_text('–°–æ–æ–±—â–µ–Ω–∏–µ 3')
    await call.message.edit_text('–°–æ–æ–±—â–µ–Ω–∏–µ 4', reply_markup=keyboard)
    await call.answer()


# –ü—É—à–∫–∞
@dp.callback_query_handler(text='–ß–∞–π–Ω–∞—è –ò—Å—Ç–æ—Ä–∏—è –Ω–∞ –ü—É—à–∫–µ')
async def push(call: types.CallbackQuery, state: FSMContext):
    day = datetime.now()
    await do_cleaning_pyshk(day)
    a = str(await do_cleaning_pyshk(day)).replace('[', '').replace(']', '').replace(r'\n', '').replace(r"'",
                                                                                                       '').replace(r",",
                                                                                                                   '\n')
    buttons = [
        # types.InlineKeyboardButton(text='–†–∞—Å–ø–æ—Ä—è–¥–æ–∫', callback_data='–†–∞—Å–ø–æ—Ä—è–¥–æ–∫ –Ω–∞ –ü—É—à–∫–µ'),
        types.InlineKeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É",
                                   callback_data="–û—Ç–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É –Ω–∞ –ø—É—à–∫–µ"),
        types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='Time_to_work'),
        types.InlineKeyboardButton(text='–ó–∞–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É', callback_data='–ó–∞–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É')
    ]
    # await po_tochkam(tochka='–ß–∞–π–Ω–∞—è –ò—Å—Ç–æ—Ä–∏—è –Ω–∞ –ü—É—à–∫–µ')
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(*buttons)
    await call.message.edit_text(f'–¢–∞–∫ –∂–µ –Ω–µ –∑–∞–±—É–¥—å –ø—Ä–æ —É–±–æ—Ä–æ—á–∫—É! \n\n{await do_cleaning_cchi(day)}')
    a = 0
    print(a)
    await call.message.edit_text(f'–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è —Ç–µ–±–µ,\U0001F609 {call.from_user.first_name} \n ')
    await call.message.edit_text(
        '–ü–æ–º–Ω–∏,—Ç—ã —Å–∞–º—ã–π –ª—É—á—à–∏–π –º–∞—Å—Ç–µ—Ä –Ω–∞ –ø–ª–∞–Ω–µ—Ç–µ –∏ —É —Ç–µ–±—è –≤—Å–µ –ø–æ–ª—É—á–∏—Ç—Å—è!\n–ì–ª–∞–≤–Ω–æ–µ —Ö–æ—Ç–µ—Ç—å —ç—Ç–æ–≥–æ \nüëå —Ö–æ—Ä–æ—à–µ–≥–æ –Ω–∞—á–∞–ª–∞ –¥–Ω—è\nüòá —Ö–æ—Ä–æ—à–∏—Ö –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π\nüôè —Ö–æ—Ä–æ—à–µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è\nüòÖ —Ö–æ—Ä–æ—à–µ–≥–æ —á–∞—è\nü§ë —Ö–æ—Ä–æ—à–µ–π –∫–∞—Å—Å—ã')
    await call.message.edit_text(
        '–ì–æ—Ç–æ–≤ –ª–∏ —Ç—ã —Å–¥–µ–ª–∞—Ç—å –ø–ª–∞–Ω —á–µ–º–ø–∏–æ–Ω–∞?\n–ó—Ä—è –∑–∞—Å–æ–º–Ω–µ–≤–∞–ª—Å—è –≤ —Ç–µ–±–µ\n–¢–≤–æ—è –Ω–∞–≥—Ä–∞–¥–∞ –∂–¥–µ—Ç —Ç–µ–±—è –≤ –Ω–∞—à–µ–º —á–∞–π–Ω–æ–º –º–∏—Ä–µ!',
        reply_markup=keyboard)


# –¶–ß–ò
@dp.callback_query_handler(text='–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è —á–∞–π–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è')
async def push(call: types.CallbackQuery):
    day = datetime.now()
    await do_cleaning_cchi(day)
    a = str(await do_cleaning_cchi(day)).replace('[', '').replace(']', '').replace(r'\n', '').replace(r"'", '').replace(
        r",", '\n')
    buttons = [
        # types.InlineKeyboardButton(text='–†–∞—Å–ø–æ—Ä—è–¥–æ–∫', callback_data='–†–∞—Å–ø–æ—Ä—è–¥–æ–∫ –Ω–∞ –ü—É—à–∫–µ'),
        types.InlineKeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É",
                                   callback_data="–û—Ç–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É –Ω–∞ –ø—É—à–∫–µ"),
        types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='Time_to_work'),
        types.InlineKeyboardButton(text='–ó–∞–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É', callback_data='–ó–∞–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É')
    ]
    # await po_tochkam(tochka='–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –ß–∞–π–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è')
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(*buttons)
    await call.message.edit_text(f'–¢–∞–∫ –∂–µ –Ω–µ –∑–∞–±—É–¥—å –ø—Ä–æ —É–±–æ—Ä–æ—á–∫—É! \n\n{await do_cleaning_cchi(day)}')
    a = 0
    print(a)
    await call.message.edit_text(f'–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è —Ç–µ–±–µ,\U0001F609 {call.from_user.first_name} ')
    await call.message.edit_text(
        '–ü–æ–º–Ω–∏,—Ç—ã —Å–∞–º—ã–π –ª—É—á—à–∏–π –º–∞—Å—Ç–µ—Ä –Ω–∞ –ø–ª–∞–Ω–µ—Ç–µ –∏ —É —Ç–µ–±—è –≤—Å–µ –ø–æ–ª—É—á–∏—Ç—Å—è!\n–ì–ª–∞–≤–Ω–æ–µ —Ö–æ—Ç–µ—Ç—å —ç—Ç–æ–≥–æ \nüëå —Ö–æ—Ä–æ—à–µ–≥–æ –Ω–∞—á–∞–ª–∞ –¥–Ω—è\nüòá —Ö–æ—Ä–æ—à–∏—Ö –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π\nüôè —Ö–æ—Ä–æ—à–µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è\nüòÖ —Ö–æ—Ä–æ—à–µ–≥–æ —á–∞—è\nü§ë —Ö–æ—Ä–æ—à–µ–π –∫–∞—Å—Å—ã')
    await call.message.edit_text(
        '–ì–æ—Ç–æ–≤ –ª–∏ —Ç—ã —Å–¥–µ–ª–∞—Ç—å –ø–ª–∞–Ω —á–µ–º–ø–∏–æ–Ω–∞?\n–ó—Ä—è –∑–∞—Å–æ–º–Ω–µ–≤–∞–ª—Å—è –≤ —Ç–µ–±–µ\n–¢–≤–æ—è –Ω–∞–≥—Ä–∞–¥–∞ –∂–¥–µ—Ç —Ç–µ–±—è –≤ –Ω–∞—à–µ–º —á–∞–π–Ω–æ–º –º–∏—Ä–µ!',
        reply_markup=keyboard)
    await call.answer()
    # await FILE_ID_it.USER_id_input.set()
    # await state.update_data(id=call.from_user.id)


# –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä
@dp.callback_query_handler(text='–ß–∞–π–Ω–∞—è –ò—Å—Ç–æ—Ä–∏—è –≤ –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä–µ')
async def push(call: types.CallbackQuery, state: FSMContext):
    day = datetime.now()
    await do_cleaning_kchi(day)
    a = str(await do_cleaning_pyshk(day)).replace('[', '').replace(']', '').replace(r'\n', '').replace(r"'",
                                                                                                       '').replace(r",",
                                                                                                                   '\n')
    buttons = [
        # types.InlineKeyboardButton(text='–†–∞—Å–ø–æ—Ä—è–¥–æ–∫', callback_data='–†–∞—Å–ø–æ—Ä—è–¥–æ–∫ –Ω–∞ –ü—É—à–∫–µ'),
        types.InlineKeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É",
                                   callback_data="–û—Ç–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É –≤ –ö—Ä–∞—Å–µ"),
        types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='Time_to_work'),
        types.InlineKeyboardButton(text='–ó–∞–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É', callback_data='–ó–∞–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É')
    ]
    # await po_tochkam(tochka='–ß–∞–π–Ω–∞—è –ò—Å—Ç–æ—Ä–∏—è –Ω–∞ –ü—É—à–∫–µ')
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(*buttons)
    await call.message.edit_text(f'–¢–∞–∫ –∂–µ –Ω–µ –∑–∞–±—É–¥—å –ø—Ä–æ —É–±–æ—Ä–æ—á–∫—É! \n\n{await do_cleaning_kchi(day)}')
    a = 0
    print(a)
    await call.message.edit_text(f'–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è —Ç–µ–±–µ,\U0001F609 {call.from_user.first_name} \n ')
    await call.message.edit_text(
        '–ü–æ–º–Ω–∏,—Ç—ã —Å–∞–º—ã–π –ª—É—á—à–∏–π –º–∞—Å—Ç–µ—Ä –Ω–∞ –ø–ª–∞–Ω–µ—Ç–µ –∏ —É —Ç–µ–±—è –≤—Å–µ –ø–æ–ª—É—á–∏—Ç—Å—è!\n–ì–ª–∞–≤–Ω–æ–µ —Ö–æ—Ç–µ—Ç—å —ç—Ç–æ–≥–æ \nüëå —Ö–æ—Ä–æ—à–µ–≥–æ –Ω–∞—á–∞–ª–∞ –¥–Ω—è\nüòá —Ö–æ—Ä–æ—à–∏—Ö –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π\nüôè —Ö–æ—Ä–æ—à–µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è\nüòÖ —Ö–æ—Ä–æ—à–µ–≥–æ —á–∞—è\nü§ë —Ö–æ—Ä–æ—à–µ–π –∫–∞—Å—Å—ã')
    await call.message.edit_text(
        '–ì–æ—Ç–æ–≤ –ª–∏ —Ç—ã —Å–¥–µ–ª–∞—Ç—å –ø–ª–∞–Ω —á–µ–º–ø–∏–æ–Ω–∞?\n–ó—Ä—è –∑–∞—Å–æ–º–Ω–µ–≤–∞–ª—Å—è –≤ —Ç–µ–±–µ\n–¢–≤–æ—è –Ω–∞–≥—Ä–∞–¥–∞ –∂–¥–µ—Ç —Ç–µ–±—è –≤ –Ω–∞—à–µ–º —á–∞–π–Ω–æ–º –º–∏—Ä–µ!',
        reply_markup=keyboard)


@dp.callback_query_handler(text='–†–∞—Å–ø–æ—Ä—è–¥–æ–∫ –Ω–∞ –ü—É—à–∫–µ')
async def pushday(call: types.CallbackQuery):
    buttons = [types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='–ß–∞–π–Ω–∞—è –ò—Å—Ç–æ—Ä–∏—è –Ω–∞ –ü—É—à–∫–µ'),
               # types.InlineKeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É",
               #                            callback_data="–û—Ç–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É")
               ]
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(*buttons)
    await call.message.edit_text('–¢–µ–∫—Å—Ç —Ä–∞—Å–ø–æ—Ä—è–¥–∫–∞', reply_markup=keyboard)
    await call.answer()


@dp.callback_query_handler(text='–û—Ç–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É –Ω–∞ –ø—É—à–∫–µ')
async def pushopen(call: types.CallbackQuery):
    buttons = [types.InlineKeyboardButton(text="–°–¥–µ–ª–∞–ª, –¥–≤–∏–≥–∞–µ–º –¥–∞–ª—å—à–µ",
                                          callback_data="–°–¥–µ–ª–∞–ª, –¥–≤–∏–≥–∞–µ–º –¥–∞–ª—å—à–µ"),
               types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='–ß–∞–π–Ω–∞—è –ò—Å—Ç–æ—Ä–∏—è –Ω–∞ –ü—É—à–∫–µ')

               ]
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(*buttons)
    await call.message.edit_text(' –ù–£–ñ–ù–û —Å–¥–µ–ª–∞—Ç—å –ø–æ –ø–æ—Ä—è–¥–∫—É\n‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á')
    await call.message.edit_text('1 - –≤—ã–Ω–µ—Å—Ç–∏ –≤—Å—ë –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –Ω–∞—É–ª–∏—Ü—É')
    await call.message.edit_text('2 - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –º—É—Å–æ—Ä–Ω—ã–µ –ø–∞–∫–µ—Ç—ã')
    await call.message.edit_text('3 - –ø–æ—Å—Ç–∞–≤–∏—Ç—å –∫–∏–ø—è—Ç–∏—Ç—å—Å—è –≤–æ–¥—É', reply_markup=keyboard)
    await call.answer()


@dp.callback_query_handler(text='–°–¥–µ–ª–∞–ª, –¥–≤–∏–≥–∞–µ–º –¥–∞–ª—å—à–µ')
async def gonext(call: types.CallbackQuery):
    buttons = [types.InlineKeyboardButton(text="–í—Å–µ –≥—É—É–¥",
                                          callback_data="–í—Å–µ –≥—É—É–¥"),
               types.InlineKeyboardButton(text='–ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º–∞...', url=manager),
               types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='–ß–∞–π–Ω–∞—è –ò—Å—Ç–æ—Ä–∏—è –Ω–∞ –ü—É—à–∫–µ')
               ]
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(*buttons)
    await call.message.edit_text(
        'üí∞üí∞üí∞üí∞üí∞üí∞üí∞üí∞üí∞üí∞üí∞üí∞ \n–¢–µ–ø–µ—Ä—å –ø–æ—Å—á–∏—Ç–∞–π –æ—Å—Ç–∞—Ç–æ–∫ –¥–µ–Ω–µ–≥ –≤ –∫–∞—Å—Å–µ –∏ —Å—Ä–∞–≤–Ω–∏ —Å —Ç–µ–º —á—Ç–æ –≤ —Ç–∞–±–ª–∏—Ü–µ.',
        reply_markup=keyboard)
    await call.answer()


@dp.callback_query_handler(text='–í—Å–µ –≥—É—É–¥')
async def push(call: types.CallbackQuery):
    buttons = [types.InlineKeyboardButton(text="–ì–æ—Ç–æ–≤–æ",
                                          callback_data="–ì–æ—Ç–æ–≤–æ"),
               types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='–ß–∞–π–Ω–∞—è –ò—Å—Ç–æ—Ä–∏—è –Ω–∞ –ü—É—à–∫–µ')

               ]
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(*buttons)
    await call.message.edit_text('–í–æ–¥–∞ —É–∂–µ –Ω–∞–≤–µ—Ä–Ω–æ–µ –≤—Å–∫–∏–ø–µ–ª–∞,–∑–∞–ª–∏–≤–∞–π —Ç—ç—Ä–º–æ—Å–∞, –∑–∞–≤–∞—Ä–∏–≤–∞–π –≤–µ–ª–∫–æ–º–¥—Ä–∏–Ω–∫')
    await call.message.edit_text('–û—Ç–∫—Ä—ã–≤–∞–π —Å–º–µ–Ω—É –≤ 1–°')
    await call.message.edit_text('–ü—Ä–æ–≤–µ—Ä—å —Ç–µ–ª–µ—Ñ–æ–Ω –Ω–∞ –∑–∞—Ä—è–¥')
    await call.message.edit_text('–í–∫–ª—é—á–∏ –º—É–∑—ã–∫—É –Ω–∞ —É–ª–∏—Ü–µ', reply_markup=keyboard)
    await call.answer()


@dp.callback_query_handler(text='–ì–æ—Ç–æ–≤–æ')
async def push(call: types.CallbackQuery):
    buttons = [
        types.InlineKeyboardButton(text="–í—Å–µ —á–∏–∫–∏ –±–∞–º–±–æ–Ω–∏",
                                   callback_data="–í—Å–µ —á–∏–∫–∏ –±–∞–º–±–æ–Ω–∏"),
        types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='–ß–∞–π–Ω–∞—è –ò—Å—Ç–æ—Ä–∏—è –Ω–∞ –ü—É—à–∫–µ')
    ]
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(*buttons)
    await call.message.edit_text(
        '–û–°–¢–ê–õ–û–°–¨ –ß–£–¢–¨ –ß–£–¢–¨ –¥–æ –î–ó–ï–ù–ê\nüß∂üß∂üß∂üß∂üß∂üß∂üß∂üß∂üß∂üß∂\n–ü—Ä–æ–π–¥–∏c—å –ø–æ —Ç–æ—á–∫–∞–º —á–∏—Å—Ç–æ—Ç—ã —ç—Ç–æ–≥–æ –¥–Ω—è:')
    await call.message.edit_text(
        '-–ü—Ä–æ—Ç–µ—Ä–µ—Ç—å —Å—Ç–æ–ª–µ—à–Ω–∏—Ü—É –±–∞—Ä–∞.\n-–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—ã–∫–ª–∞–¥–∫—É —Ç–æ–≤–∞—Ä–∞ –∏ —Ü–µ–Ω–Ω–∏–∫–∏.\n-–£–±–æ—Ä–∫–∞ –°–∞–Ω—É–∑–ª–∞\n-–û–ø—Ä—ã—Å–∫–∞—Ç—å —Ü–≤–µ—Ç—ã\n-–£–±–æ—Ä–∫–∞ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–∞\n-–í—ã–º—ã—Ç—å –ª–∏—Ü–æ –±–∞—Ä–Ω–æ–π —Å—Ç–æ–π–∫–∏',
        reply_markup=keyboard)
    await call.answer()


@dp.callback_query_handler(text="–í—Å–µ —á–∏–∫–∏ –±–∞–º–±–æ–Ω–∏")
async def push(call: types.CallbackQuery):
    buttons = [
        types.InlineKeyboardButton(text="–°—Ç–∞—Ä—Ç",
                                   callback_data="–°—Ç–∞—Ä—Ç"),
        types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='–ß–∞–π–Ω–∞—è –ò—Å—Ç–æ—Ä–∏—è –Ω–∞ –ü—É—à–∫–µ')
    ]
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(*buttons)
    await call.message.edit_text(f'{call.from_user.first_name}\nüòáüòáüòáüòáüòá')
    await call.message.edit_text('–ë–õ–ê–ì–û–î–ê–†–ò–ú –ó–ê –ü–û–†–Ø–î–û–ö !\n–í–ï–î–¨ –¢–û–õ–¨–ö–û –í –ß–ò–°–¢–û–¢–ï –ò –ü–û–†–Ø–î–ö–ï –í–û–î–ò–¢–°–Ø –ò–ó–û–ë–ò–õ–ò–ï üí∞',
                                  reply_markup=keyboard)
    await call.answer()


@dp.callback_query_handler(text="–°—Ç–∞—Ä—Ç")
async def closesmena(call: types.CallbackQuery):
    KPI_it = []
    await KPI_lines(KPI_it)
    buttons = [
        types.InlineKeyboardButton(text="–ó–∞–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É",
                                   callback_data="–ó–∞–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É"),
        types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='–ß–∞–π–Ω–∞—è –ò—Å—Ç–æ—Ä–∏—è –Ω–∞ –ü—É—à–∫–µ')
    ]
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(*buttons)
    await call.message.edit_text(f'{call.from_user.first_name}')
    # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –∫–æ—Ç–æ—Ä—É—é –±—É–¥—É—Ç –º–µ–Ω—è—Ç—å
    await call.message.edit_text(
        f'''–¢–≤–æ–π –ö–ü–ò –Ω–∞ —ç—Ç–æ –º–µ—Å—è—Ü. \n\n{print(*KPI_it)}''',
        reply_markup=keyboard)
    await call.answer()


# KRASNODAR#########################
@dp.callback_query_handler(text='–û—Ç–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É –≤ –ö—Ä–∞—Å–µ')
async def pushopen(call: types.CallbackQuery):
    buttons = [types.InlineKeyboardButton(text="–°–¥–µ–ª–∞–ª, –¥–≤–∏–≥–∞–µ–º –¥–∞–ª—å—à–µ",
                                          callback_data="–°–¥–µ–ª–∞–ª, –¥–≤–∏–≥–∞–µ–º –¥–∞–ª—å—à–µ –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä–µ"),
               types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='–ß–∞–π–Ω–∞—è –ò—Å—Ç–æ—Ä–∏—è –≤ –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä–µ')

               ]
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(*buttons)
    await call.message.edit_text(' –ù–£–ñ–ù–û —Å–¥–µ–ª–∞—Ç—å –ø–æ –ø–æ—Ä—è–¥–∫—É\n‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á')
    await call.message.edit_text('1 - –≤—ã–Ω–µ—Å—Ç–∏ –≤—Å—ë –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –Ω–∞—É–ª–∏—Ü—É')
    await call.message.edit_text('2 - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –º—É—Å–æ—Ä–Ω—ã–µ –ø–∞–∫–µ—Ç—ã')
    await call.message.edit_text('3 - –ø–æ—Å—Ç–∞–≤–∏—Ç—å –∫–∏–ø—è—Ç–∏—Ç—å—Å—è –≤–æ–¥—É', reply_markup=keyboard)
    await call.answer()


@dp.callback_query_handler(text='–°–¥–µ–ª–∞–ª, –¥–≤–∏–≥–∞–µ–º –¥–∞–ª—å—à–µ –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä–µ')
async def gonext(call: types.CallbackQuery):
    buttons = [types.InlineKeyboardButton(text="–í—Å–µ –≥—É—É–¥",
                                          callback_data="–í—Å–µ –≥—É—É–¥ –≤ –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä–µ"),
               types.InlineKeyboardButton(text='–ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º–∞...', url=manager),
               types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='–ß–∞–π–Ω–∞—è –ò—Å—Ç–æ—Ä–∏—è –≤ –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä–µ')
               ]
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(*buttons)
    await call.message.edit_text(
        'üí∞üí∞üí∞üí∞üí∞üí∞üí∞üí∞üí∞üí∞üí∞üí∞ \n–¢–µ–ø–µ—Ä—å –ø–æ—Å—á–∏—Ç–∞–π –æ—Å—Ç–∞—Ç–æ–∫ –¥–µ–Ω–µ–≥ –≤ –∫–∞—Å—Å–µ –∏ —Å—Ä–∞–≤–Ω–∏ —Å —Ç–µ–º —á—Ç–æ –≤ —Ç–∞–±–ª–∏—Ü–µ.',
        reply_markup=keyboard)
    await call.answer()


@dp.callback_query_handler(text='–í—Å–µ –≥—É—É–¥ –≤ –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä–µ')
async def push(call: types.CallbackQuery):
    buttons = [types.InlineKeyboardButton(text="–ì–æ—Ç–æ–≤–æ",
                                          callback_data="–ì–æ—Ç–æ–≤–æ –≤ –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä–µ"),
               types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='–ß–∞–π–Ω–∞—è –ò—Å—Ç–æ—Ä–∏—è –≤ –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä–µ')

               ]
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(*buttons)
    await call.message.edit_text('–í–æ–¥–∞ —É–∂–µ –Ω–∞–≤–µ—Ä–Ω–æ–µ –≤—Å–∫–∏–ø–µ–ª–∞,–∑–∞–ª–∏–≤–∞–π —Ç—ç—Ä–º–æ—Å–∞, –∑–∞–≤–∞—Ä–∏–≤–∞–π –≤–µ–ª–∫–æ–º–¥—Ä–∏–Ω–∫')
    await call.message.edit_text('–û—Ç–∫—Ä—ã–≤–∞–π —Å–º–µ–Ω—É –≤ 1–°')
    await call.message.edit_text('–ü—Ä–æ–≤–µ—Ä—å —Ç–µ–ª–µ—Ñ–æ–Ω –Ω–∞ –∑–∞—Ä—è–¥')
    await call.message.edit_text('–í–∫–ª—é—á–∏ –º—É–∑—ã–∫—É –Ω–∞ —É–ª–∏—Ü–µ', reply_markup=keyboard)
    await call.answer()


@dp.callback_query_handler(text='–ì–æ—Ç–æ–≤–æ –≤ –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä–µ')
async def push(call: types.CallbackQuery):
    buttons = [
        types.InlineKeyboardButton(text="–í—Å–µ —á–∏–∫–∏ –±–∞–º–±–æ–Ω–∏",
                                   callback_data="–í—Å–µ —á–∏–∫–∏ –±–∞–º–±–æ–Ω–∏ –≤ –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä–µ"),
        types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='–ß–∞–π–Ω–∞—è –ò—Å—Ç–æ—Ä–∏—è –Ω–∞ –ü—É—à–∫–µ')
    ]
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(*buttons)
    await call.message.edit_text(
        '–û–°–¢–ê–õ–û–°–¨ –ß–£–¢–¨ –ß–£–¢–¨ –¥–æ –î–ó–ï–ù–ê\nüß∂üß∂üß∂üß∂üß∂üß∂üß∂üß∂üß∂üß∂\n–ü—Ä–æ–π–¥–∏c—å –ø–æ —Ç–æ—á–∫–∞–º —á–∏—Å—Ç–æ—Ç—ã —ç—Ç–æ–≥–æ –¥–Ω—è:')
    await call.message.edit_text(
        '-–ü—Ä–æ—Ç–µ—Ä–µ—Ç—å —Å—Ç–æ–ª–µ—à–Ω–∏—Ü—É –±–∞—Ä–∞.\n-–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—ã–∫–ª–∞–¥–∫—É —Ç–æ–≤–∞—Ä–∞ –∏ —Ü–µ–Ω–Ω–∏–∫–∏.\n-–£–±–æ—Ä–∫–∞ –°–∞–Ω—É–∑–ª–∞\n-–û–ø—Ä—ã—Å–∫–∞—Ç—å —Ü–≤–µ—Ç—ã\n-–£–±–æ—Ä–∫–∞ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–∞\n-–í—ã–º—ã—Ç—å –ª–∏—Ü–æ –±–∞—Ä–Ω–æ–π —Å—Ç–æ–π–∫–∏',
        reply_markup=keyboard)
    await call.answer()


@dp.callback_query_handler(text="–í—Å–µ —á–∏–∫–∏ –±–∞–º–±–æ–Ω–∏ –≤ –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä–µ")
async def push(call: types.CallbackQuery):
    buttons = [
        types.InlineKeyboardButton(text="–°—Ç–∞—Ä—Ç",
                                   callback_data="–°—Ç–∞—Ä—Ç –≤ –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä–µ"),
        types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='–ß–∞–π–Ω–∞—è –ò—Å—Ç–æ—Ä–∏—è –≤ –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä–µ ')
    ]
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(*buttons)
    await call.message.edit_text(f'{call.from_user.first_name}\nüòáüòáüòáüòáüòá')
    await call.message.edit_text('–ë–õ–ê–ì–û–î–ê–†–ò–ú –ó–ê –ü–û–†–Ø–î–û–ö !\n–í–ï–î–¨ –¢–û–õ–¨–ö–û –í –ß–ò–°–¢–û–¢–ï –ò –ü–û–†–Ø–î–ö–ï –í–û–î–ò–¢–°–Ø –ò–ó–û–ë–ò–õ–ò–ï üí∞',
                                  reply_markup=keyboard)
    await call.answer()


@dp.callback_query_handler(text="–°—Ç–∞—Ä—Ç –≤ –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä–µ")
async def closesmena(call: types.CallbackQuery):
    a = await KPI_kras_lines()
    a = str(a).replace('[', '').replace(']', '').replace(r'\n', '').replace(r"'", '').replace(r",", '\n')
    buttons = [
        types.InlineKeyboardButton(text="–ó–∞–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É",
                                   callback_data="–ó–∞–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É"),
        types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='–ß–∞–π–Ω–∞—è –ò—Å—Ç–æ—Ä–∏—è –Ω–∞ –ü—É—à–∫–µ')
    ]
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(*buttons)
    await call.message.edit_text(f'{call.from_user.first_name}')
    # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –∫–æ—Ç–æ—Ä—É—é –±—É–¥—É—Ç –º–µ–Ω—è—Ç—å
    await call.message.edit_text(
        f'''–¢–≤–æ–π –ö–ü–ò –Ω–∞ —ç—Ç–æ –º–µ—Å—è—Ü. \n\n{a}''',
        reply_markup=keyboard)
    await call.answer()


###################################
@dp.callback_query_handler(text='–ó–∞–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É')
async def push(call: types.CallbackQuery):
    buttons = [types.InlineKeyboardButton(text="–û—Ç–ª–∏—á–Ω–æ –∑–∞–∫—Ä—ã–ª\nüí∞üí∞üòÖüí∞üí∞",
                                          callback_data="–û—Ç–ª–∏—á–Ω–æ –∑–∞–∫—Ä—ã–ª"),
               types.InlineKeyboardButton(text="–ü–ª–æ—Ö–æ –∑–∞–∫—Ä—ã–ª\nüòî",
                                          callback_data="–ü–ª–æ—Ö–æ –∑–∞–∫—Ä—ã–ª"),
               types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='–ß–∞–π–Ω–∞—è –ò—Å—Ç–æ—Ä–∏—è –Ω–∞ –ü—É—à–∫–µ')

               ]
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(*buttons)
    await call.message.edit_text(f'–ö–∞–∫ –ø—Ä–æ—à–µ–ª –¥–µ–Ω—å {call.from_user.first_name} ?', reply_markup=keyboard)
    await call.answer()


@dp.callback_query_handler(text='–û—Ç–ª–∏—á–Ω–æ –∑–∞–∫—Ä—ã–ª')
async def push(call: types.CallbackQuery):
    buttons = [types.InlineKeyboardButton(text="–°–≤–æ—Ä–∞—á–∏–≤–∞–µ–º—Å—è,  —Ä–µ–±—è—Ç–∞", callback_data="Closing_smena")
               # types.InlineKeyboardButton(text="üòî",
               #                            callback_data="–ü–ª–æ—Ö–æ –∑–∞–∫—Ä—ã–ª"),
               # types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='–ß–∞–π–Ω–∞—è –ò—Å—Ç–æ—Ä–∏—è –Ω–∞ –ü—É—à–∫–µ')

               ]
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(*buttons)
    # await call.message.edit_text(f'–ö–∞–∫ –ø—Ä–æ—à–µ–ª –¥–µ–Ω—å {call.from_user.first_name} ?', reply_markup=keyboard)
    await call.message.edit_text('–°—É–ø–µ—Ä !üí∞ \n –î–∞–≤–∞–π —Ç–µ–ø–µ—Ä—å –≤–º–µ—Å—Ç–µ –∑–∞–∫—Ä–æ–µ–º —Å–º–µ–Ω—É.\n–ü–û–ï–•–ê–õ–ò !)', reply_markup=keyboard)
    # await call.message.edit_text('–¢–µ–∫—Å—Ç –∑–∞–∫—Ä—ã—Ç–∏—è —Å–º–µ–Ω—ã3')
    # await call.message.edit_text('–¢–µ–∫—Å—Ç –∑–∞–∫—Ä—ã—Ç–∏—è —Å–º–µ–Ω—ã4', reply_markup=keyboard)
    await call.answer()


@dp.callback_query_handler(text="Closing_smena")
async def push(call: types.CallbackQuery):
    buttons = [types.InlineKeyboardButton(text="–ì–æ—Ç–æ–≤–æ", callback_data="–ì–æ—Ç–æ–≤–æ2")
               # types.InlineKeyboardButton(text="üòî",
               #                            callback_data="–ü–ª–æ—Ö–æ –∑–∞–∫—Ä—ã–ª"),
               # types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='–ß–∞–π–Ω–∞—è –ò—Å—Ç–æ—Ä–∏—è –Ω–∞ –ü—É—à–∫–µ')
               ]
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(*buttons)
    await call.message.edit_text(f'–î–ï–õ–ê–ô –í–°–Å –ü–û –ü–û–†–Ø–î–ö–£\n‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á ')
    await call.message.edit_text(
        '- –£–±—Ä–∞—Ç—å —Å–æ —Å—Ç–æ–ª–æ–≤ –≤—Å—é –ø–æ—Å—É–¥—É.\n-–í—ã–º—ã—Ç—å –ø–æ—Å—É–¥—É, –ø—Ä–æ—Ç–µ—Ä–µ—Ç—å, –ø–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ –ø–æ–ª–∫–∏.\n-–í—ã–º—ã—Ç—å —á–∞–±–∞–Ω–∏, –ø–æ–¥–¥–æ–Ω—ã –∏ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ —Å—É—à–∫—É, –ø—Ä–∏–¥–≤–∏–Ω—É—Ç—å —Å—Ç—É–ª—å—è —É —Å—Ç–æ–ª–æ–≤ –∏ —É –±–∞—Ä–∞,—Å–ª–æ–∂–∏—Ç—å –ø–ª–µ–¥—ã.'
        '\n-–ù–∞–≤–µ—Å—Ç–∏ –ø–æ—Ä—è–¥–æ–∫ –Ω–∞ –±–∞—Ä–µ –∏ –Ω–∞ —Ä–∞–±–æ—á–µ–º —Å—Ç–æ–ª–µ\n-–û–ø—É—Å—Ç–æ—à–∏—Ç—å —Ç–µ—Ä–º–æ—Å—ã –æ—Ç –ø–µ—Ä–µ–∫–∏–ø–µ–≤—à–µ–π –≤–æ–¥—ã.\n-–ó–∞–Ω–µ—Å—Ç–∏ –ª–µ—Ç–Ω—é—é –≤–µ—Ä–∞–Ω–¥—É, —Å—Ç—É–ª—å—è, –ø–æ–¥—É—à–∫–∏.\n-–í—ã–Ω–µ—Å—Ç–∏ –º—É—Å–æ—Ä.',
        reply_markup=keyboard)
    # await call.message.edit_text('–¢–µ–∫—Å—Ç –∑–∞–∫—Ä—ã—Ç–∏—è —Å–º–µ–Ω—ã3')
    # await call.message.edit_text('–¢–µ–∫—Å—Ç –∑–∞–∫—Ä—ã—Ç–∏—è —Å–º–µ–Ω—ã4', reply_markup=keyboard)
    await call.answer()


@dp.callback_query_handler(text="–ì–æ—Ç–æ–≤–æ2")
async def push(call: types.CallbackQuery):
    buttons = [types.InlineKeyboardButton(text="–°–î–ï–õ–ê–õ, –≥—É–¥ –±–∞–π", callback_data="–°–î–ï–õ–ê–õ, –≥—É–¥ –±–∞–π"),
               # types.InlineKeyboardButton(text="–ù–∞–ø–æ–º–Ω–∏, –∫–∞–∫ –∑–∞–∫—Ä—ã–∞—Ç—å —Å–º–µ–Ω—É", url=""),
               # types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='–ß–∞–π–Ω–∞—è –ò—Å—Ç–æ—Ä–∏—è –Ω–∞ –ü—É—à–∫–µ')
               ]
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(*buttons)
    await call.message.edit_text(f'–¢–ï–ü–ï–†–¨ –ó–ê–ô–ú–ï–ú–°–Ø 1–° –∏ –¢–ê–ë–õ–ò–¶–ï–ô\n‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á ')
    await call.message.edit_text(
        "---  –°—á–∏—Ç–∞–µ–º –Ω–∞–ª–∏—á–∫—É –≤ –∫–∞—Å—Å–µ, –∑–∞–Ω–æ—Å–∏–º –≤ —Ç–∞–±–ª—É.\n---  –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–º–µ–Ω—É –≤ 1–°,–∑–∞–Ω–æ—Å–∏–º –≤ —Ç–∞–±–ª—É.\n--- –û—Ç–ø—Ä–∞–≤–ª—è–π —Ñ–æ—Ç–æ —á–µ–∫–æ–≤ –º–Ω–µ(–±–æ—Ç—É) –∏ —è –ø–µ—Ä–µ—à–ª—é –∏—Ö –º–µ–Ω–µ–¥–∂–µ—Ä—É\n---  –í—ã–∫–ª—é—á–∞–µ–º —Å–≤–µ—Ç –≤—Ä—É–±–∏–ª—å–Ω–∏–∫–µ.\n---  –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–∞–≥–∞–∑–∏–Ω.",
        reply_markup=keyboard)
    # await call.message.edit_text('–¢–µ–∫—Å—Ç –∑–∞–∫—Ä—ã—Ç–∏—è —Å–º–µ–Ω—ã3')
    # await call.message.edit_text('–¢–µ–∫—Å—Ç –∑–∞–∫—Ä—ã—Ç–∏—è —Å–º–µ–Ω—ã4', reply_markup=keyboard)
    await call.answer()


@dp.callback_query_handler(text="–°–î–ï–õ–ê–õ, –≥—É–¥ –±–∞–π")
async def push(call: types.CallbackQuery):
    buttons = [types.InlineKeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–∫",
                                          callback_data="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–∫")]
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(*buttons)
    await call.message.edit_text(
        f'–ù—É –≤–æ—Ç —Ç—ã –∏ –ø–æ–¥–æ—à–µ–ª –∫ –∑–∞–∫–ª—é—á–∞—é—â–µ–º—É —Ñ–∞–∫—Ç–æ—Ä—É –Ω–∞—à–µ–π –≤—Å—Ç—Ä–µ—á–∏ —Å–µ–≥–æ–¥–Ω—è!\n–ó–∞—Ö–æ–¥–∏ –∫–æ –º–Ω–µ –∑–∞–≤—Ç—Ä–∞, —è –≤–µ–¥—å –±—É–¥—É —Å–∫—É—á–∞—Ç—å –ø–æ —Ç–µ–±–µ!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–µ –∑–∞–±—É–¥—å –ø—Ä–∏–ª–∞—Ç—å –º–Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —á–µ–∫–æ–≤ \n\n\n–î–æ —Å–∫–æ—Ä–æ–π –≤—Å—Ç—Ä–µ—á–∏',
        reply_markup=keyboard)
    await call.answer()


@dp.callback_query_handler(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–∫")
async def push(call: types.CallbackQuery):
    buttons = [types.InlineKeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–∫",
                                          callback_data="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–∫")]
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(*buttons)
    await call.message.edit_text(f'–û—Ç–ø—Ä–∞–≤–ª—è–π —á–µ–∫, —è –ª–æ–≤–ª—é!', reply_markup=keyboard)
    await call.message.edit_text_sticker(r'CAACAgIAAxkBAAEEmxhibtEFTZ4688dKcoatIyq04BViPwACWgADrWW8FGIMKfS80fFyJAQ')
    await call.answer()


@dp.callback_query_handler(text='–ü–ª–æ—Ö–æ –∑–∞–∫—Ä—ã–ª')
async def push(call: types.CallbackQuery):
    buttons = [types.InlineKeyboardButton(text="–°–≤–æ—Ä–∞—á–∏–≤–∞–µ–º—Å—è,  —Ä–µ–±—è—Ç–∞",
                                          callback_data="Closing_smena"),
               # types.InlineKeyboardButton(text="üòî",
               #                            callback_data="–ü–ª–æ—Ö–æ –∑–∞–∫—Ä—ã–ª"),
               types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='–ß–∞–π–Ω–∞—è –ò—Å—Ç–æ—Ä–∏—è –Ω–∞ –ü—É—à–∫–µ')

               ]
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(*buttons)
    await call.message.edit_text(f'–°–æ–π–¥–µ—Ç,–Ω–æ —É —Ç–µ–±—è –±—É–¥–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å—Ç—Ä–µ–ª—å–Ω—É—Ç—å –∑–∞–≤—Ç—Ä–∞.\n–¢–´ –õ–£–ß–®–ò–ô! üí™',
                                  reply_markup=keyboard)
    await call.answer()


@dp.callback_query_handler(text='–ü–ª–æ—Ö–æ –∑–∞–∫—Ä—ã–ª')
async def push(call: types.CallbackQuery):
    buttons = [types.InlineKeyboardButton(text="–°–≤–æ—Ä–∞—á–∏–≤–∞–µ–º—Å—è,  —Ä–µ–±—è—Ç–∞",
                                          callback_data="Closing_smena"),
               # types.InlineKeyboardButton(text="üòî",
               #                            callback_data="–ü–ª–æ—Ö–æ –∑–∞–∫—Ä—ã–ª"),
               types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='–ß–∞–π–Ω–∞—è –ò—Å—Ç–æ—Ä–∏—è –Ω–∞ –ü—É—à–∫–µ')

               ]
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(*buttons)
    await call.message.edit_text(f'–°–æ–π–¥–µ—Ç,–Ω–æ —É —Ç–µ–±—è –±—É–¥–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å—Ç—Ä–µ–ª—å–Ω—É—Ç—å –∑–∞–≤—Ç—Ä–∞.\n–¢–´ –õ–£–ß–®–ò–ô! üí™',
                                  reply_markup=keyboard)
    await call.answer()

@dp.callback_query_handler(text="–†–µ–≥–ª–∞–º–µ–Ω—Ç")
async def reglament(call: types.CallbackQuery):
    buttons = [types.InlineKeyboardButton(text='–†–µ–≥–ª–∞–º–µ–Ω—Ç',
                                          url='https://docs.google.com/document/d/1PtKJEh4C5sq3zWwRSU8VQrMh1EkT7jXlqPuY2gW3vcA/edit'),
               types.InlineKeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É",
                                          callback_data="–û—Ç–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É")
               ]
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(*buttons)
    await call.message.edit_text('–†–µ–≥–ª–∞–º–µ–Ω—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –æ–¥–Ω–æ–∏–º–µ–Ω–Ω–æ–π –∫–Ω–æ–ø–æ—á–∫–µ', reply_markup=keyboard)
    await call.answer()


@dp.callback_query_handler(text="–î–æ–ª–∂–Ω–æ—Å—Ç–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")
async def dolginstr(call: types.CallbackQuery):
    buttons = [types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='Time_to_work'),
               types.InlineKeyboardButton(text="–î–æ–ª–∂–Ω–æ—Å—Ç–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è",
                                          url="https://docs.google.com/document/d/1QZ_50FBmrg89zRkTPr0VX2KwdjykzKQxeMnfsOs43Zk/edit")
               ]
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(*buttons)
    await call.message.edit_text('–î–æ–ª–∂–Ω–æ—Å—Ç–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ –æ–¥–Ω–æ–∏–º–µ–Ω–Ω–æ–π –∫–Ω–æ–ø–æ—á–∫–µ', reply_markup=keyboard)
    await call.answer()


@dp.callback_query_handler(text="–ú–∏—Å—Å–∏—è –∫–æ–º–ø–∞–Ω–∏–∏")
async def mission(call: types.CallbackQuery):
    buttons = [types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='Time_to_work'),
               types.InlineKeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É",
                                          callback_data="–û—Ç–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É")
               ]
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(*buttons)
    await call.message.edit_text(
        '–ù–∞—à–∞ –º–∏—Å—Å–∏—è - –ø–æ–¥–æ–±—Ä–∞—Ç—å —á–∞–π —Å –∑–∞–±–æ—Ç–æ–π  –¥–ª—è –í–∞—Å, –≤–∞—à–µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –∏ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏—è, —Ç–µ–º —Å–∞–º—ã–º —Å–¥–µ–ª–∞–≤ –≤–∞—Å –°—á–∞—Å—Ç–ª–∏–≤–µ–π!',
        reply_markup=keyboard)
    await call.answer()




@dp.callback_query_handler(text='CHI_in_Park_Rev_Photo')
async def send_long_message_from(call: types.CallbackQuery):
    await call.message.edit_text('–ü–æ–ª–æ–∂–∏–ª —Ç–≤–æ–π —á–µ–∫ –≤ –∫–∞—Ä–º–∞–Ω!', reply_markup=None)
    a = date.today()
    # await file_id[0].download(f'cheki/send-{file_id[0].file_unique_id}.jpg')  # –°–æ—Ö—Ä–∞–Ω–∏–µ–Ω–∏–µ —á–µ–∫–æ–≤
    inf = '–ß–∞–π–Ω–∞—è –ò—Å—Ç–æ—Ä–∏—è –Ω–∞ #–ø–∞—Ä–∫–µ_–†–µ–≤–æ–ª—é—Ü–∏–∏'
    await bot.send_photo(chat_id=chekichat, photo=file_id[0])
    file_id.clear()
    await bot.send_message(chat_id=chekichat, text=f"–•–µ–πüññ,—Å–µ–≥–æ–¥–Ω—è {a}, –æ—Ç–ø—Ä–∞–≤–∏–ª –µ–≥–æ {phone1} –∏ —ç—Ç–æ {inf}")
    # await message.answer(text='–ü–æ–ª–æ–∂–∏–ª —Ç–≤–æ–π —á–µ–∫ –≤ –∫–∞—Ä–º–∞–Ω!')


@dp.callback_query_handler(text='CHI_on_Pyshka_photo')
async def send_long_message_from(call: types.CallbackQuery):
    await call.message.edit_text('–ü–æ–ª–æ–∂–∏–ª —Ç–≤–æ–π —á–µ–∫ –≤ –∫–∞—Ä–º–∞–Ω!', reply_markup=None)
    a = date.today()
    # await file_id[0].download(f'cheki/send-{file_id[0].file_unique_id}.jpg')  # –°–æ—Ö—Ä–∞–Ω–∏–µ–Ω–∏–µ —á–µ–∫–æ–≤
    inf = '–ß–∞–π–Ω–∞—è –ò—Å—Ç–æ—Ä–∏—è –Ω–∞ #–ü—É—à–∫–µ'
    await bot.send_photo(chat_id=chekichat, photo=file_id[0])
    file_id.clear()
    await bot.send_message(chat_id=chekichat, text=f"–•–µ–πüññ,—Å–µ–≥–æ–¥–Ω—è {a}, –æ—Ç–ø—Ä–∞–≤–∏–ª –µ–≥–æ {phone1} –∏ —ç—Ç–æ {inf}")
    # await message.answer(text='–ü–æ–ª–æ–∂–∏–ª —Ç–≤–æ–π —á–µ–∫ –≤ –∫–∞—Ä–º–∞–Ω!')


@dp.callback_query_handler(text='CHI_on_Teatralka_photo')
async def send_long_message_from(call: types.CallbackQuery):
    # keyboard = types.InlineKeyboardMarkup(row_width=1, resize_keyboard=True)
    await call.message.edit_text('–ü–æ–ª–æ–∂–∏–ª —Ç–≤–æ–π —á–µ–∫ –≤ –∫–∞—Ä–º–∞–Ω!', reply_markup=None)
    a = date.today()
    # await file_id[0].download(f'cheki/send-{file_id[0].file_unique_id}.jpg')  # –°–æ—Ö—Ä–∞–Ω–∏–µ–Ω–∏–µ —á–µ–∫–æ–≤
    inf = '–ß–∞–π–Ω–∞—è –ò—Å—Ç–æ—Ä–∏—è –Ω–∞ #–¢–µ–∞—Ç—Ä–∞–ª–∫–µ'
    await bot.send_photo(chat_id=chekichat, photo=file_id[0])
    file_id.clear()
    await bot.send_message(chat_id=chekichat, text=f"–•–µ–πüññ,—Å–µ–≥–æ–¥–Ω—è {a}, –æ—Ç–ø—Ä–∞–≤–∏–ª –µ–≥–æ {phone1} –∏ —ç—Ç–æ {inf}")
    # await message.answer(text='–ü–æ–ª–æ–∂–∏–ª —Ç–≤–æ–π —á–µ–∫ –≤ –∫–∞—Ä–º–∞–Ω!')


@dp.callback_query_handler(text='CHI_In_Kras_on_Teatr_photo')
async def send_long_message_from(call: types.CallbackQuery):
    await call.message.edit_text('–ü–æ–ª–æ–∂–∏–ª —Ç–≤–æ–π —á–µ–∫ –≤ –∫–∞—Ä–º–∞–Ω!', reply_markup=None)
    a = date.today()
    # await file_id[0].download(f'cheki/send-{file_id[0].file_unique_id}.jpg')  # –°–æ—Ö—Ä–∞–Ω–∏–µ–Ω–∏–µ —á–µ–∫–æ–≤
    inf = '–ß–∞–π–Ω–∞—è –ò—Å—Ç–æ—Ä–∏—è –≤ #–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä–µ_–Ω–∞_–¢–µ–∞—Ç—Ä–∞–ª—å–Ω–æ–π'
    await bot.send_photo(chat_id=chekichat, photo=file_id[0])
    file_id.clear()
    await bot.send_message(chat_id=chekichat, text=f"–•–µ–πüññ,—Å–µ–≥–æ–¥–Ω—è {a}, –æ—Ç–ø—Ä–∞–≤–∏–ª –µ–≥–æ {phone1} –∏ —ç—Ç–æ {inf}")


@dp.callback_query_handler(text='CHI_In_Kras_on_kras_photo')
async def send_long_message_from(call: types.CallbackQuery):
    await call.message.edit_text('–ü–æ–ª–æ–∂–∏–ª —Ç–≤–æ–π —á–µ–∫ –≤ –∫–∞—Ä–º–∞–Ω!', reply_markup=None)
    a = date.today()
    # await file_id[0].download(f'cheki/send-{file_id[0].file_unique_id}.jpg')  # –°–æ—Ö—Ä–∞–Ω–∏–µ–Ω–∏–µ —á–µ–∫–æ–≤
    inf = '–ß–∞–π–Ω–∞—è –ò—Å—Ç–æ—Ä–∏—è –≤ –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä–µ –Ω–∞ #–ö—Ä–∞—Å–Ω–æ–π'
    await bot.send_photo(chat_id=chekichat, photo=file_id[0])
    file_id.clear()
    await bot.send_message(chat_id=chekichat, text=f"–•–µ–πüññ,—Å–µ–≥–æ–¥–Ω—è {a}, –æ—Ç–ø—Ä–∞–≤–∏–ª –µ–≥–æ {phone1} –∏ —ç—Ç–æ {inf}")